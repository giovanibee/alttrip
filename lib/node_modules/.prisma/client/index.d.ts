
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Story
 * 
 */
export type Story = $Result.DefaultSelection<Prisma.$StoryPayload>
/**
 * Model Chapter
 * 
 */
export type Chapter = $Result.DefaultSelection<Prisma.$ChapterPayload>
/**
 * Model CompletedChapters
 * 
 */
export type CompletedChapters = $Result.DefaultSelection<Prisma.$CompletedChaptersPayload>
/**
 * Model InProgressChapters
 * 
 */
export type InProgressChapters = $Result.DefaultSelection<Prisma.$InProgressChaptersPayload>
/**
 * Model SavedStories
 * 
 */
export type SavedStories = $Result.DefaultSelection<Prisma.$SavedStoriesPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Stories
 * const stories = await prisma.story.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Stories
   * const stories = await prisma.story.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.story`: Exposes CRUD operations for the **Story** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stories
    * const stories = await prisma.story.findMany()
    * ```
    */
  get story(): Prisma.StoryDelegate<ExtArgs>;

  /**
   * `prisma.chapter`: Exposes CRUD operations for the **Chapter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chapters
    * const chapters = await prisma.chapter.findMany()
    * ```
    */
  get chapter(): Prisma.ChapterDelegate<ExtArgs>;

  /**
   * `prisma.completedChapters`: Exposes CRUD operations for the **CompletedChapters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CompletedChapters
    * const completedChapters = await prisma.completedChapters.findMany()
    * ```
    */
  get completedChapters(): Prisma.CompletedChaptersDelegate<ExtArgs>;

  /**
   * `prisma.inProgressChapters`: Exposes CRUD operations for the **InProgressChapters** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InProgressChapters
    * const inProgressChapters = await prisma.inProgressChapters.findMany()
    * ```
    */
  get inProgressChapters(): Prisma.InProgressChaptersDelegate<ExtArgs>;

  /**
   * `prisma.savedStories`: Exposes CRUD operations for the **SavedStories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedStories
    * const savedStories = await prisma.savedStories.findMany()
    * ```
    */
  get savedStories(): Prisma.SavedStoriesDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.5.2
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Story: 'Story',
    Chapter: 'Chapter',
    CompletedChapters: 'CompletedChapters',
    InProgressChapters: 'InProgressChapters',
    SavedStories: 'SavedStories',
    User: 'User'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'story' | 'chapter' | 'completedChapters' | 'inProgressChapters' | 'savedStories' | 'user'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Story: {
        payload: Prisma.$StoryPayload<ExtArgs>
        fields: Prisma.StoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          findFirst: {
            args: Prisma.StoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          findMany: {
            args: Prisma.StoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>[]
          }
          create: {
            args: Prisma.StoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          createMany: {
            args: Prisma.StoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.StoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          update: {
            args: Prisma.StoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          deleteMany: {
            args: Prisma.StoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StoryPayload>
          }
          aggregate: {
            args: Prisma.StoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStory>
          }
          groupBy: {
            args: Prisma.StoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.StoryCountArgs<ExtArgs>,
            result: $Utils.Optional<StoryCountAggregateOutputType> | number
          }
        }
      }
      Chapter: {
        payload: Prisma.$ChapterPayload<ExtArgs>
        fields: Prisma.ChapterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChapterFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChapterFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findFirst: {
            args: Prisma.ChapterFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChapterFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          findMany: {
            args: Prisma.ChapterFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>[]
          }
          create: {
            args: Prisma.ChapterCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          createMany: {
            args: Prisma.ChapterCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ChapterDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          update: {
            args: Prisma.ChapterUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          deleteMany: {
            args: Prisma.ChapterDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ChapterUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ChapterUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ChapterPayload>
          }
          aggregate: {
            args: Prisma.ChapterAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateChapter>
          }
          groupBy: {
            args: Prisma.ChapterGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ChapterGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChapterCountArgs<ExtArgs>,
            result: $Utils.Optional<ChapterCountAggregateOutputType> | number
          }
        }
      }
      CompletedChapters: {
        payload: Prisma.$CompletedChaptersPayload<ExtArgs>
        fields: Prisma.CompletedChaptersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompletedChaptersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompletedChaptersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload>
          }
          findFirst: {
            args: Prisma.CompletedChaptersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompletedChaptersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload>
          }
          findMany: {
            args: Prisma.CompletedChaptersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload>[]
          }
          create: {
            args: Prisma.CompletedChaptersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload>
          }
          createMany: {
            args: Prisma.CompletedChaptersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CompletedChaptersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload>
          }
          update: {
            args: Prisma.CompletedChaptersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload>
          }
          deleteMany: {
            args: Prisma.CompletedChaptersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CompletedChaptersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CompletedChaptersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CompletedChaptersPayload>
          }
          aggregate: {
            args: Prisma.CompletedChaptersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCompletedChapters>
          }
          groupBy: {
            args: Prisma.CompletedChaptersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CompletedChaptersGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompletedChaptersCountArgs<ExtArgs>,
            result: $Utils.Optional<CompletedChaptersCountAggregateOutputType> | number
          }
        }
      }
      InProgressChapters: {
        payload: Prisma.$InProgressChaptersPayload<ExtArgs>
        fields: Prisma.InProgressChaptersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InProgressChaptersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InProgressChaptersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload>
          }
          findFirst: {
            args: Prisma.InProgressChaptersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InProgressChaptersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload>
          }
          findMany: {
            args: Prisma.InProgressChaptersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload>[]
          }
          create: {
            args: Prisma.InProgressChaptersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload>
          }
          createMany: {
            args: Prisma.InProgressChaptersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.InProgressChaptersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload>
          }
          update: {
            args: Prisma.InProgressChaptersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload>
          }
          deleteMany: {
            args: Prisma.InProgressChaptersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.InProgressChaptersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.InProgressChaptersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$InProgressChaptersPayload>
          }
          aggregate: {
            args: Prisma.InProgressChaptersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateInProgressChapters>
          }
          groupBy: {
            args: Prisma.InProgressChaptersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<InProgressChaptersGroupByOutputType>[]
          }
          count: {
            args: Prisma.InProgressChaptersCountArgs<ExtArgs>,
            result: $Utils.Optional<InProgressChaptersCountAggregateOutputType> | number
          }
        }
      }
      SavedStories: {
        payload: Prisma.$SavedStoriesPayload<ExtArgs>
        fields: Prisma.SavedStoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SavedStoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SavedStoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload>
          }
          findFirst: {
            args: Prisma.SavedStoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SavedStoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload>
          }
          findMany: {
            args: Prisma.SavedStoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload>[]
          }
          create: {
            args: Prisma.SavedStoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload>
          }
          createMany: {
            args: Prisma.SavedStoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SavedStoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload>
          }
          update: {
            args: Prisma.SavedStoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload>
          }
          deleteMany: {
            args: Prisma.SavedStoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SavedStoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SavedStoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SavedStoriesPayload>
          }
          aggregate: {
            args: Prisma.SavedStoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSavedStories>
          }
          groupBy: {
            args: Prisma.SavedStoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SavedStoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.SavedStoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<SavedStoriesCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StoryCountOutputType
   */

  export type StoryCountOutputType = {
    chapters: number
    savedStories: number
  }

  export type StoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | StoryCountOutputTypeCountChaptersArgs
    savedStories?: boolean | StoryCountOutputTypeCountSavedStoriesArgs
  }

  // Custom InputTypes

  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoryCountOutputType
     */
    select?: StoryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
  }


  /**
   * StoryCountOutputType without action
   */
  export type StoryCountOutputTypeCountSavedStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedStoriesWhereInput
  }



  /**
   * Count Type ChapterCountOutputType
   */

  export type ChapterCountOutputType = {
    completedChapters: number
    inProgressChapters: number
  }

  export type ChapterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    completedChapters?: boolean | ChapterCountOutputTypeCountCompletedChaptersArgs
    inProgressChapters?: boolean | ChapterCountOutputTypeCountInProgressChaptersArgs
  }

  // Custom InputTypes

  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChapterCountOutputType
     */
    select?: ChapterCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountCompletedChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompletedChaptersWhereInput
  }


  /**
   * ChapterCountOutputType without action
   */
  export type ChapterCountOutputTypeCountInProgressChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InProgressChaptersWhereInput
  }



  /**
   * Count Type CompletedChaptersCountOutputType
   */

  export type CompletedChaptersCountOutputType = {
    chapters: number
  }

  export type CompletedChaptersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | CompletedChaptersCountOutputTypeCountChaptersArgs
  }

  // Custom InputTypes

  /**
   * CompletedChaptersCountOutputType without action
   */
  export type CompletedChaptersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChaptersCountOutputType
     */
    select?: CompletedChaptersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CompletedChaptersCountOutputType without action
   */
  export type CompletedChaptersCountOutputTypeCountChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
  }



  /**
   * Count Type InProgressChaptersCountOutputType
   */

  export type InProgressChaptersCountOutputType = {
    chapters: number
  }

  export type InProgressChaptersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | InProgressChaptersCountOutputTypeCountChaptersArgs
  }

  // Custom InputTypes

  /**
   * InProgressChaptersCountOutputType without action
   */
  export type InProgressChaptersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChaptersCountOutputType
     */
    select?: InProgressChaptersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * InProgressChaptersCountOutputType without action
   */
  export type InProgressChaptersCountOutputTypeCountChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
  }



  /**
   * Count Type SavedStoriesCountOutputType
   */

  export type SavedStoriesCountOutputType = {
    stories: number
  }

  export type SavedStoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stories?: boolean | SavedStoriesCountOutputTypeCountStoriesArgs
  }

  // Custom InputTypes

  /**
   * SavedStoriesCountOutputType without action
   */
  export type SavedStoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStoriesCountOutputType
     */
    select?: SavedStoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SavedStoriesCountOutputType without action
   */
  export type SavedStoriesCountOutputTypeCountStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
  }



  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdStories: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdStories?: boolean | UserCountOutputTypeCountCreatedStoriesArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Story
   */

  export type AggregateStory = {
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  export type StoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type StorySumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type StoryMinAggregateOutputType = {
    id: number | null
    description: string | null
    name: string | null
    userId: number | null
  }

  export type StoryMaxAggregateOutputType = {
    id: number | null
    description: string | null
    name: string | null
    userId: number | null
  }

  export type StoryCountAggregateOutputType = {
    id: number
    description: number
    name: number
    userId: number
    _all: number
  }


  export type StoryAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type StorySumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type StoryMinAggregateInputType = {
    id?: true
    description?: true
    name?: true
    userId?: true
  }

  export type StoryMaxAggregateInputType = {
    id?: true
    description?: true
    name?: true
    userId?: true
  }

  export type StoryCountAggregateInputType = {
    id?: true
    description?: true
    name?: true
    userId?: true
    _all?: true
  }

  export type StoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Story to aggregate.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stories
    **/
    _count?: true | StoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoryMaxAggregateInputType
  }

  export type GetStoryAggregateType<T extends StoryAggregateArgs> = {
        [P in keyof T & keyof AggregateStory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStory[P]>
      : GetScalarType<T[P], AggregateStory[P]>
  }




  export type StoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithAggregationInput | StoryOrderByWithAggregationInput[]
    by: StoryScalarFieldEnum[] | StoryScalarFieldEnum
    having?: StoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoryCountAggregateInputType | true
    _avg?: StoryAvgAggregateInputType
    _sum?: StorySumAggregateInputType
    _min?: StoryMinAggregateInputType
    _max?: StoryMaxAggregateInputType
  }

  export type StoryGroupByOutputType = {
    id: number
    description: string | null
    name: string
    userId: number
    _count: StoryCountAggregateOutputType | null
    _avg: StoryAvgAggregateOutputType | null
    _sum: StorySumAggregateOutputType | null
    _min: StoryMinAggregateOutputType | null
    _max: StoryMaxAggregateOutputType | null
  }

  type GetStoryGroupByPayload<T extends StoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoryGroupByOutputType[P]>
            : GetScalarType<T[P], StoryGroupByOutputType[P]>
        }
      >
    >


  export type StorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    name?: boolean
    userId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    chapters?: boolean | Story$chaptersArgs<ExtArgs>
    savedStories?: boolean | Story$savedStoriesArgs<ExtArgs>
    _count?: boolean | StoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["story"]>

  export type StorySelectScalar = {
    id?: boolean
    description?: boolean
    name?: boolean
    userId?: boolean
  }

  export type StoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    chapters?: boolean | Story$chaptersArgs<ExtArgs>
    savedStories?: boolean | Story$savedStoriesArgs<ExtArgs>
    _count?: boolean | StoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $StoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Story"
    objects: {
      owner: Prisma.$UserPayload<ExtArgs>
      chapters: Prisma.$ChapterPayload<ExtArgs>[]
      savedStories: Prisma.$SavedStoriesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string | null
      name: string
      userId: number
    }, ExtArgs["result"]["story"]>
    composites: {}
  }


  type StoryGetPayload<S extends boolean | null | undefined | StoryDefaultArgs> = $Result.GetResult<Prisma.$StoryPayload, S>

  type StoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StoryFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: StoryCountAggregateInputType | true
    }

  export interface StoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Story'], meta: { name: 'Story' } }
    /**
     * Find zero or one Story that matches the filter.
     * @param {StoryFindUniqueArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StoryFindUniqueArgs<ExtArgs>>
    ): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Story that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {StoryFindUniqueOrThrowArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Story that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StoryFindFirstArgs<ExtArgs>>
    ): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Story that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindFirstOrThrowArgs} args - Arguments to find a Story
     * @example
     * // Get one Story
     * const story = await prisma.story.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Stories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stories
     * const stories = await prisma.story.findMany()
     * 
     * // Get first 10 Stories
     * const stories = await prisma.story.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const storyWithIdOnly = await prisma.story.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Story.
     * @param {StoryCreateArgs} args - Arguments to create a Story.
     * @example
     * // Create one Story
     * const Story = await prisma.story.create({
     *   data: {
     *     // ... data to create a Story
     *   }
     * })
     * 
    **/
    create<T extends StoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StoryCreateArgs<ExtArgs>>
    ): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Stories.
     *     @param {StoryCreateManyArgs} args - Arguments to create many Stories.
     *     @example
     *     // Create many Stories
     *     const story = await prisma.story.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Story.
     * @param {StoryDeleteArgs} args - Arguments to delete one Story.
     * @example
     * // Delete one Story
     * const Story = await prisma.story.delete({
     *   where: {
     *     // ... filter to delete one Story
     *   }
     * })
     * 
    **/
    delete<T extends StoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StoryDeleteArgs<ExtArgs>>
    ): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Story.
     * @param {StoryUpdateArgs} args - Arguments to update one Story.
     * @example
     * // Update one Story
     * const story = await prisma.story.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StoryUpdateArgs<ExtArgs>>
    ): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Stories.
     * @param {StoryDeleteManyArgs} args - Arguments to filter Stories to delete.
     * @example
     * // Delete a few Stories
     * const { count } = await prisma.story.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stories
     * const story = await prisma.story.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Story.
     * @param {StoryUpsertArgs} args - Arguments to update or create a Story.
     * @example
     * // Update or create a Story
     * const story = await prisma.story.upsert({
     *   create: {
     *     // ... data to create a Story
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Story we want to update
     *   }
     * })
    **/
    upsert<T extends StoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StoryUpsertArgs<ExtArgs>>
    ): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Stories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryCountArgs} args - Arguments to filter Stories to count.
     * @example
     * // Count the number of Stories
     * const count = await prisma.story.count({
     *   where: {
     *     // ... the filter for the Stories we want to count
     *   }
     * })
    **/
    count<T extends StoryCountArgs>(
      args?: Subset<T, StoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoryAggregateArgs>(args: Subset<T, StoryAggregateArgs>): Prisma.PrismaPromise<GetStoryAggregateType<T>>

    /**
     * Group by Story.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StoryGroupByArgs['orderBy'] }
        : { orderBy?: StoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Story model
   */
  readonly fields: StoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Story.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    chapters<T extends Story$chaptersArgs<ExtArgs> = {}>(args?: Subset<T, Story$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'findMany'> | Null>;

    savedStories<T extends Story$savedStoriesArgs<ExtArgs> = {}>(args?: Subset<T, Story$savedStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Story model
   */ 
  interface StoryFieldRefs {
    readonly id: FieldRef<"Story", 'Int'>
    readonly description: FieldRef<"Story", 'String'>
    readonly name: FieldRef<"Story", 'String'>
    readonly userId: FieldRef<"Story", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Story findUnique
   */
  export type StoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where: StoryWhereUniqueInput
  }


  /**
   * Story findUniqueOrThrow
   */
  export type StoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where: StoryWhereUniqueInput
  }


  /**
   * Story findFirst
   */
  export type StoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     */
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }


  /**
   * Story findFirstOrThrow
   */
  export type StoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Story to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stories.
     */
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }


  /**
   * Story findMany
   */
  export type StoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter, which Stories to fetch.
     */
    where?: StoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stories to fetch.
     */
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stories.
     */
    cursor?: StoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stories.
     */
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }


  /**
   * Story create
   */
  export type StoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Story.
     */
    data: XOR<StoryCreateInput, StoryUncheckedCreateInput>
  }


  /**
   * Story createMany
   */
  export type StoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stories.
     */
    data: StoryCreateManyInput | StoryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Story update
   */
  export type StoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Story.
     */
    data: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
    /**
     * Choose, which Story to update.
     */
    where: StoryWhereUniqueInput
  }


  /**
   * Story updateMany
   */
  export type StoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stories.
     */
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyInput>
    /**
     * Filter which Stories to update
     */
    where?: StoryWhereInput
  }


  /**
   * Story upsert
   */
  export type StoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Story to update in case it exists.
     */
    where: StoryWhereUniqueInput
    /**
     * In case the Story found by the `where` argument doesn't exist, create a new Story with this data.
     */
    create: XOR<StoryCreateInput, StoryUncheckedCreateInput>
    /**
     * In case the Story was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StoryUpdateInput, StoryUncheckedUpdateInput>
  }


  /**
   * Story delete
   */
  export type StoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    /**
     * Filter which Story to delete.
     */
    where: StoryWhereUniqueInput
  }


  /**
   * Story deleteMany
   */
  export type StoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stories to delete
     */
    where?: StoryWhereInput
  }


  /**
   * Story.chapters
   */
  export type Story$chaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    cursor?: ChapterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }


  /**
   * Story.savedStories
   */
  export type Story$savedStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    where?: SavedStoriesWhereInput
    orderBy?: SavedStoriesOrderByWithRelationInput | SavedStoriesOrderByWithRelationInput[]
    cursor?: SavedStoriesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedStoriesScalarFieldEnum | SavedStoriesScalarFieldEnum[]
  }


  /**
   * Story without action
   */
  export type StoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
  }



  /**
   * Model Chapter
   */

  export type AggregateChapter = {
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  export type ChapterAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    order: number | null
    storyId: number | null
  }

  export type ChapterSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    order: number | null
    storyId: number | null
  }

  export type ChapterMinAggregateOutputType = {
    id: number | null
    description: string | null
    details: string | null
    latitude: number | null
    longitude: number | null
    name: string | null
    passcode: string | null
    order: number | null
    secretText: string | null
    storyId: number | null
  }

  export type ChapterMaxAggregateOutputType = {
    id: number | null
    description: string | null
    details: string | null
    latitude: number | null
    longitude: number | null
    name: string | null
    passcode: string | null
    order: number | null
    secretText: string | null
    storyId: number | null
  }

  export type ChapterCountAggregateOutputType = {
    id: number
    description: number
    details: number
    latitude: number
    longitude: number
    name: number
    passcode: number
    order: number
    secretText: number
    storyId: number
    _all: number
  }


  export type ChapterAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    order?: true
    storyId?: true
  }

  export type ChapterSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    order?: true
    storyId?: true
  }

  export type ChapterMinAggregateInputType = {
    id?: true
    description?: true
    details?: true
    latitude?: true
    longitude?: true
    name?: true
    passcode?: true
    order?: true
    secretText?: true
    storyId?: true
  }

  export type ChapterMaxAggregateInputType = {
    id?: true
    description?: true
    details?: true
    latitude?: true
    longitude?: true
    name?: true
    passcode?: true
    order?: true
    secretText?: true
    storyId?: true
  }

  export type ChapterCountAggregateInputType = {
    id?: true
    description?: true
    details?: true
    latitude?: true
    longitude?: true
    name?: true
    passcode?: true
    order?: true
    secretText?: true
    storyId?: true
    _all?: true
  }

  export type ChapterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapter to aggregate.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Chapters
    **/
    _count?: true | ChapterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChapterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChapterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChapterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChapterMaxAggregateInputType
  }

  export type GetChapterAggregateType<T extends ChapterAggregateArgs> = {
        [P in keyof T & keyof AggregateChapter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChapter[P]>
      : GetScalarType<T[P], AggregateChapter[P]>
  }




  export type ChapterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithAggregationInput | ChapterOrderByWithAggregationInput[]
    by: ChapterScalarFieldEnum[] | ChapterScalarFieldEnum
    having?: ChapterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChapterCountAggregateInputType | true
    _avg?: ChapterAvgAggregateInputType
    _sum?: ChapterSumAggregateInputType
    _min?: ChapterMinAggregateInputType
    _max?: ChapterMaxAggregateInputType
  }

  export type ChapterGroupByOutputType = {
    id: number
    description: string
    details: string
    latitude: number
    longitude: number
    name: string
    passcode: string | null
    order: number
    secretText: string | null
    storyId: number
    _count: ChapterCountAggregateOutputType | null
    _avg: ChapterAvgAggregateOutputType | null
    _sum: ChapterSumAggregateOutputType | null
    _min: ChapterMinAggregateOutputType | null
    _max: ChapterMaxAggregateOutputType | null
  }

  type GetChapterGroupByPayload<T extends ChapterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChapterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChapterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChapterGroupByOutputType[P]>
            : GetScalarType<T[P], ChapterGroupByOutputType[P]>
        }
      >
    >


  export type ChapterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    details?: boolean
    latitude?: boolean
    longitude?: boolean
    name?: boolean
    passcode?: boolean
    order?: boolean
    secretText?: boolean
    storyId?: boolean
    story?: boolean | StoryDefaultArgs<ExtArgs>
    completedChapters?: boolean | Chapter$completedChaptersArgs<ExtArgs>
    inProgressChapters?: boolean | Chapter$inProgressChaptersArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chapter"]>

  export type ChapterSelectScalar = {
    id?: boolean
    description?: boolean
    details?: boolean
    latitude?: boolean
    longitude?: boolean
    name?: boolean
    passcode?: boolean
    order?: boolean
    secretText?: boolean
    storyId?: boolean
  }

  export type ChapterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    story?: boolean | StoryDefaultArgs<ExtArgs>
    completedChapters?: boolean | Chapter$completedChaptersArgs<ExtArgs>
    inProgressChapters?: boolean | Chapter$inProgressChaptersArgs<ExtArgs>
    _count?: boolean | ChapterCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ChapterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Chapter"
    objects: {
      story: Prisma.$StoryPayload<ExtArgs>
      completedChapters: Prisma.$CompletedChaptersPayload<ExtArgs>[]
      inProgressChapters: Prisma.$InProgressChaptersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      details: string
      latitude: number
      longitude: number
      name: string
      passcode: string | null
      order: number
      secretText: string | null
      storyId: number
    }, ExtArgs["result"]["chapter"]>
    composites: {}
  }


  type ChapterGetPayload<S extends boolean | null | undefined | ChapterDefaultArgs> = $Result.GetResult<Prisma.$ChapterPayload, S>

  type ChapterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ChapterFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ChapterCountAggregateInputType | true
    }

  export interface ChapterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Chapter'], meta: { name: 'Chapter' } }
    /**
     * Find zero or one Chapter that matches the filter.
     * @param {ChapterFindUniqueArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChapterFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ChapterFindUniqueArgs<ExtArgs>>
    ): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Chapter that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChapterFindUniqueOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChapterFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChapterFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Chapter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChapterFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ChapterFindFirstArgs<ExtArgs>>
    ): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Chapter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindFirstOrThrowArgs} args - Arguments to find a Chapter
     * @example
     * // Get one Chapter
     * const chapter = await prisma.chapter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChapterFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ChapterFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Chapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chapters
     * const chapters = await prisma.chapter.findMany()
     * 
     * // Get first 10 Chapters
     * const chapters = await prisma.chapter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chapterWithIdOnly = await prisma.chapter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChapterFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChapterFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Chapter.
     * @param {ChapterCreateArgs} args - Arguments to create a Chapter.
     * @example
     * // Create one Chapter
     * const Chapter = await prisma.chapter.create({
     *   data: {
     *     // ... data to create a Chapter
     *   }
     * })
     * 
    **/
    create<T extends ChapterCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ChapterCreateArgs<ExtArgs>>
    ): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Chapters.
     *     @param {ChapterCreateManyArgs} args - Arguments to create many Chapters.
     *     @example
     *     // Create many Chapters
     *     const chapter = await prisma.chapter.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChapterCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChapterCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chapter.
     * @param {ChapterDeleteArgs} args - Arguments to delete one Chapter.
     * @example
     * // Delete one Chapter
     * const Chapter = await prisma.chapter.delete({
     *   where: {
     *     // ... filter to delete one Chapter
     *   }
     * })
     * 
    **/
    delete<T extends ChapterDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ChapterDeleteArgs<ExtArgs>>
    ): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Chapter.
     * @param {ChapterUpdateArgs} args - Arguments to update one Chapter.
     * @example
     * // Update one Chapter
     * const chapter = await prisma.chapter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChapterUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ChapterUpdateArgs<ExtArgs>>
    ): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Chapters.
     * @param {ChapterDeleteManyArgs} args - Arguments to filter Chapters to delete.
     * @example
     * // Delete a few Chapters
     * const { count } = await prisma.chapter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChapterDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ChapterDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chapters
     * const chapter = await prisma.chapter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChapterUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ChapterUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chapter.
     * @param {ChapterUpsertArgs} args - Arguments to update or create a Chapter.
     * @example
     * // Update or create a Chapter
     * const chapter = await prisma.chapter.upsert({
     *   create: {
     *     // ... data to create a Chapter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chapter we want to update
     *   }
     * })
    **/
    upsert<T extends ChapterUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ChapterUpsertArgs<ExtArgs>>
    ): Prisma__ChapterClient<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Chapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterCountArgs} args - Arguments to filter Chapters to count.
     * @example
     * // Count the number of Chapters
     * const count = await prisma.chapter.count({
     *   where: {
     *     // ... the filter for the Chapters we want to count
     *   }
     * })
    **/
    count<T extends ChapterCountArgs>(
      args?: Subset<T, ChapterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChapterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChapterAggregateArgs>(args: Subset<T, ChapterAggregateArgs>): Prisma.PrismaPromise<GetChapterAggregateType<T>>

    /**
     * Group by Chapter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChapterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChapterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChapterGroupByArgs['orderBy'] }
        : { orderBy?: ChapterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChapterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChapterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Chapter model
   */
  readonly fields: ChapterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Chapter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChapterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    story<T extends StoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StoryDefaultArgs<ExtArgs>>): Prisma__StoryClient<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    completedChapters<T extends Chapter$completedChaptersArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$completedChaptersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'findMany'> | Null>;

    inProgressChapters<T extends Chapter$inProgressChaptersArgs<ExtArgs> = {}>(args?: Subset<T, Chapter$inProgressChaptersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Chapter model
   */ 
  interface ChapterFieldRefs {
    readonly id: FieldRef<"Chapter", 'Int'>
    readonly description: FieldRef<"Chapter", 'String'>
    readonly details: FieldRef<"Chapter", 'String'>
    readonly latitude: FieldRef<"Chapter", 'Float'>
    readonly longitude: FieldRef<"Chapter", 'Float'>
    readonly name: FieldRef<"Chapter", 'String'>
    readonly passcode: FieldRef<"Chapter", 'String'>
    readonly order: FieldRef<"Chapter", 'Int'>
    readonly secretText: FieldRef<"Chapter", 'String'>
    readonly storyId: FieldRef<"Chapter", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Chapter findUnique
   */
  export type ChapterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }


  /**
   * Chapter findUniqueOrThrow
   */
  export type ChapterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where: ChapterWhereUniqueInput
  }


  /**
   * Chapter findFirst
   */
  export type ChapterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }


  /**
   * Chapter findFirstOrThrow
   */
  export type ChapterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapter to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Chapters.
     */
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }


  /**
   * Chapter findMany
   */
  export type ChapterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter, which Chapters to fetch.
     */
    where?: ChapterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Chapters to fetch.
     */
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Chapters.
     */
    cursor?: ChapterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Chapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Chapters.
     */
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }


  /**
   * Chapter create
   */
  export type ChapterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to create a Chapter.
     */
    data: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
  }


  /**
   * Chapter createMany
   */
  export type ChapterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Chapters.
     */
    data: ChapterCreateManyInput | ChapterCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Chapter update
   */
  export type ChapterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The data needed to update a Chapter.
     */
    data: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
    /**
     * Choose, which Chapter to update.
     */
    where: ChapterWhereUniqueInput
  }


  /**
   * Chapter updateMany
   */
  export type ChapterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Chapters.
     */
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyInput>
    /**
     * Filter which Chapters to update
     */
    where?: ChapterWhereInput
  }


  /**
   * Chapter upsert
   */
  export type ChapterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * The filter to search for the Chapter to update in case it exists.
     */
    where: ChapterWhereUniqueInput
    /**
     * In case the Chapter found by the `where` argument doesn't exist, create a new Chapter with this data.
     */
    create: XOR<ChapterCreateInput, ChapterUncheckedCreateInput>
    /**
     * In case the Chapter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChapterUpdateInput, ChapterUncheckedUpdateInput>
  }


  /**
   * Chapter delete
   */
  export type ChapterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    /**
     * Filter which Chapter to delete.
     */
    where: ChapterWhereUniqueInput
  }


  /**
   * Chapter deleteMany
   */
  export type ChapterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Chapters to delete
     */
    where?: ChapterWhereInput
  }


  /**
   * Chapter.completedChapters
   */
  export type Chapter$completedChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    where?: CompletedChaptersWhereInput
    orderBy?: CompletedChaptersOrderByWithRelationInput | CompletedChaptersOrderByWithRelationInput[]
    cursor?: CompletedChaptersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompletedChaptersScalarFieldEnum | CompletedChaptersScalarFieldEnum[]
  }


  /**
   * Chapter.inProgressChapters
   */
  export type Chapter$inProgressChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    where?: InProgressChaptersWhereInput
    orderBy?: InProgressChaptersOrderByWithRelationInput | InProgressChaptersOrderByWithRelationInput[]
    cursor?: InProgressChaptersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InProgressChaptersScalarFieldEnum | InProgressChaptersScalarFieldEnum[]
  }


  /**
   * Chapter without action
   */
  export type ChapterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
  }



  /**
   * Model CompletedChapters
   */

  export type AggregateCompletedChapters = {
    _count: CompletedChaptersCountAggregateOutputType | null
    _avg: CompletedChaptersAvgAggregateOutputType | null
    _sum: CompletedChaptersSumAggregateOutputType | null
    _min: CompletedChaptersMinAggregateOutputType | null
    _max: CompletedChaptersMaxAggregateOutputType | null
  }

  export type CompletedChaptersAvgAggregateOutputType = {
    completedChapterId: number | null
    completedById: number | null
  }

  export type CompletedChaptersSumAggregateOutputType = {
    completedChapterId: number | null
    completedById: number | null
  }

  export type CompletedChaptersMinAggregateOutputType = {
    completedChapterId: number | null
    completedById: number | null
  }

  export type CompletedChaptersMaxAggregateOutputType = {
    completedChapterId: number | null
    completedById: number | null
  }

  export type CompletedChaptersCountAggregateOutputType = {
    completedChapterId: number
    completedById: number
    _all: number
  }


  export type CompletedChaptersAvgAggregateInputType = {
    completedChapterId?: true
    completedById?: true
  }

  export type CompletedChaptersSumAggregateInputType = {
    completedChapterId?: true
    completedById?: true
  }

  export type CompletedChaptersMinAggregateInputType = {
    completedChapterId?: true
    completedById?: true
  }

  export type CompletedChaptersMaxAggregateInputType = {
    completedChapterId?: true
    completedById?: true
  }

  export type CompletedChaptersCountAggregateInputType = {
    completedChapterId?: true
    completedById?: true
    _all?: true
  }

  export type CompletedChaptersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompletedChapters to aggregate.
     */
    where?: CompletedChaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedChapters to fetch.
     */
    orderBy?: CompletedChaptersOrderByWithRelationInput | CompletedChaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompletedChaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedChapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedChapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CompletedChapters
    **/
    _count?: true | CompletedChaptersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompletedChaptersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompletedChaptersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompletedChaptersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompletedChaptersMaxAggregateInputType
  }

  export type GetCompletedChaptersAggregateType<T extends CompletedChaptersAggregateArgs> = {
        [P in keyof T & keyof AggregateCompletedChapters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompletedChapters[P]>
      : GetScalarType<T[P], AggregateCompletedChapters[P]>
  }




  export type CompletedChaptersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompletedChaptersWhereInput
    orderBy?: CompletedChaptersOrderByWithAggregationInput | CompletedChaptersOrderByWithAggregationInput[]
    by: CompletedChaptersScalarFieldEnum[] | CompletedChaptersScalarFieldEnum
    having?: CompletedChaptersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompletedChaptersCountAggregateInputType | true
    _avg?: CompletedChaptersAvgAggregateInputType
    _sum?: CompletedChaptersSumAggregateInputType
    _min?: CompletedChaptersMinAggregateInputType
    _max?: CompletedChaptersMaxAggregateInputType
  }

  export type CompletedChaptersGroupByOutputType = {
    completedChapterId: number
    completedById: number
    _count: CompletedChaptersCountAggregateOutputType | null
    _avg: CompletedChaptersAvgAggregateOutputType | null
    _sum: CompletedChaptersSumAggregateOutputType | null
    _min: CompletedChaptersMinAggregateOutputType | null
    _max: CompletedChaptersMaxAggregateOutputType | null
  }

  type GetCompletedChaptersGroupByPayload<T extends CompletedChaptersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompletedChaptersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompletedChaptersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompletedChaptersGroupByOutputType[P]>
            : GetScalarType<T[P], CompletedChaptersGroupByOutputType[P]>
        }
      >
    >


  export type CompletedChaptersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    completedChapterId?: boolean
    completedById?: boolean
    chapters?: boolean | CompletedChapters$chaptersArgs<ExtArgs>
    completedBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | CompletedChaptersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["completedChapters"]>

  export type CompletedChaptersSelectScalar = {
    completedChapterId?: boolean
    completedById?: boolean
  }

  export type CompletedChaptersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | CompletedChapters$chaptersArgs<ExtArgs>
    completedBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | CompletedChaptersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CompletedChaptersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CompletedChapters"
    objects: {
      chapters: Prisma.$ChapterPayload<ExtArgs>[]
      completedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      completedChapterId: number
      completedById: number
    }, ExtArgs["result"]["completedChapters"]>
    composites: {}
  }


  type CompletedChaptersGetPayload<S extends boolean | null | undefined | CompletedChaptersDefaultArgs> = $Result.GetResult<Prisma.$CompletedChaptersPayload, S>

  type CompletedChaptersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompletedChaptersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: CompletedChaptersCountAggregateInputType | true
    }

  export interface CompletedChaptersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CompletedChapters'], meta: { name: 'CompletedChapters' } }
    /**
     * Find zero or one CompletedChapters that matches the filter.
     * @param {CompletedChaptersFindUniqueArgs} args - Arguments to find a CompletedChapters
     * @example
     * // Get one CompletedChapters
     * const completedChapters = await prisma.completedChapters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompletedChaptersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CompletedChaptersFindUniqueArgs<ExtArgs>>
    ): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CompletedChapters that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompletedChaptersFindUniqueOrThrowArgs} args - Arguments to find a CompletedChapters
     * @example
     * // Get one CompletedChapters
     * const completedChapters = await prisma.completedChapters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompletedChaptersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompletedChaptersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CompletedChapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedChaptersFindFirstArgs} args - Arguments to find a CompletedChapters
     * @example
     * // Get one CompletedChapters
     * const completedChapters = await prisma.completedChapters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompletedChaptersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CompletedChaptersFindFirstArgs<ExtArgs>>
    ): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CompletedChapters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedChaptersFindFirstOrThrowArgs} args - Arguments to find a CompletedChapters
     * @example
     * // Get one CompletedChapters
     * const completedChapters = await prisma.completedChapters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompletedChaptersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CompletedChaptersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CompletedChapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedChaptersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CompletedChapters
     * const completedChapters = await prisma.completedChapters.findMany()
     * 
     * // Get first 10 CompletedChapters
     * const completedChapters = await prisma.completedChapters.findMany({ take: 10 })
     * 
     * // Only select the `completedChapterId`
     * const completedChaptersWithCompletedChapterIdOnly = await prisma.completedChapters.findMany({ select: { completedChapterId: true } })
     * 
    **/
    findMany<T extends CompletedChaptersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompletedChaptersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CompletedChapters.
     * @param {CompletedChaptersCreateArgs} args - Arguments to create a CompletedChapters.
     * @example
     * // Create one CompletedChapters
     * const CompletedChapters = await prisma.completedChapters.create({
     *   data: {
     *     // ... data to create a CompletedChapters
     *   }
     * })
     * 
    **/
    create<T extends CompletedChaptersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CompletedChaptersCreateArgs<ExtArgs>>
    ): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CompletedChapters.
     *     @param {CompletedChaptersCreateManyArgs} args - Arguments to create many CompletedChapters.
     *     @example
     *     // Create many CompletedChapters
     *     const completedChapters = await prisma.completedChapters.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CompletedChaptersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompletedChaptersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CompletedChapters.
     * @param {CompletedChaptersDeleteArgs} args - Arguments to delete one CompletedChapters.
     * @example
     * // Delete one CompletedChapters
     * const CompletedChapters = await prisma.completedChapters.delete({
     *   where: {
     *     // ... filter to delete one CompletedChapters
     *   }
     * })
     * 
    **/
    delete<T extends CompletedChaptersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CompletedChaptersDeleteArgs<ExtArgs>>
    ): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CompletedChapters.
     * @param {CompletedChaptersUpdateArgs} args - Arguments to update one CompletedChapters.
     * @example
     * // Update one CompletedChapters
     * const completedChapters = await prisma.completedChapters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompletedChaptersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CompletedChaptersUpdateArgs<ExtArgs>>
    ): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CompletedChapters.
     * @param {CompletedChaptersDeleteManyArgs} args - Arguments to filter CompletedChapters to delete.
     * @example
     * // Delete a few CompletedChapters
     * const { count } = await prisma.completedChapters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompletedChaptersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CompletedChaptersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CompletedChapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedChaptersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CompletedChapters
     * const completedChapters = await prisma.completedChapters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompletedChaptersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CompletedChaptersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CompletedChapters.
     * @param {CompletedChaptersUpsertArgs} args - Arguments to update or create a CompletedChapters.
     * @example
     * // Update or create a CompletedChapters
     * const completedChapters = await prisma.completedChapters.upsert({
     *   create: {
     *     // ... data to create a CompletedChapters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CompletedChapters we want to update
     *   }
     * })
    **/
    upsert<T extends CompletedChaptersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CompletedChaptersUpsertArgs<ExtArgs>>
    ): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CompletedChapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedChaptersCountArgs} args - Arguments to filter CompletedChapters to count.
     * @example
     * // Count the number of CompletedChapters
     * const count = await prisma.completedChapters.count({
     *   where: {
     *     // ... the filter for the CompletedChapters we want to count
     *   }
     * })
    **/
    count<T extends CompletedChaptersCountArgs>(
      args?: Subset<T, CompletedChaptersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompletedChaptersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CompletedChapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedChaptersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompletedChaptersAggregateArgs>(args: Subset<T, CompletedChaptersAggregateArgs>): Prisma.PrismaPromise<GetCompletedChaptersAggregateType<T>>

    /**
     * Group by CompletedChapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompletedChaptersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompletedChaptersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompletedChaptersGroupByArgs['orderBy'] }
        : { orderBy?: CompletedChaptersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompletedChaptersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompletedChaptersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CompletedChapters model
   */
  readonly fields: CompletedChaptersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CompletedChapters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompletedChaptersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    chapters<T extends CompletedChapters$chaptersArgs<ExtArgs> = {}>(args?: Subset<T, CompletedChapters$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'findMany'> | Null>;

    completedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CompletedChapters model
   */ 
  interface CompletedChaptersFieldRefs {
    readonly completedChapterId: FieldRef<"CompletedChapters", 'Int'>
    readonly completedById: FieldRef<"CompletedChapters", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * CompletedChapters findUnique
   */
  export type CompletedChaptersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * Filter, which CompletedChapters to fetch.
     */
    where: CompletedChaptersWhereUniqueInput
  }


  /**
   * CompletedChapters findUniqueOrThrow
   */
  export type CompletedChaptersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * Filter, which CompletedChapters to fetch.
     */
    where: CompletedChaptersWhereUniqueInput
  }


  /**
   * CompletedChapters findFirst
   */
  export type CompletedChaptersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * Filter, which CompletedChapters to fetch.
     */
    where?: CompletedChaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedChapters to fetch.
     */
    orderBy?: CompletedChaptersOrderByWithRelationInput | CompletedChaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompletedChapters.
     */
    cursor?: CompletedChaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedChapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedChapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompletedChapters.
     */
    distinct?: CompletedChaptersScalarFieldEnum | CompletedChaptersScalarFieldEnum[]
  }


  /**
   * CompletedChapters findFirstOrThrow
   */
  export type CompletedChaptersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * Filter, which CompletedChapters to fetch.
     */
    where?: CompletedChaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedChapters to fetch.
     */
    orderBy?: CompletedChaptersOrderByWithRelationInput | CompletedChaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CompletedChapters.
     */
    cursor?: CompletedChaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedChapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedChapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CompletedChapters.
     */
    distinct?: CompletedChaptersScalarFieldEnum | CompletedChaptersScalarFieldEnum[]
  }


  /**
   * CompletedChapters findMany
   */
  export type CompletedChaptersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * Filter, which CompletedChapters to fetch.
     */
    where?: CompletedChaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CompletedChapters to fetch.
     */
    orderBy?: CompletedChaptersOrderByWithRelationInput | CompletedChaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CompletedChapters.
     */
    cursor?: CompletedChaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CompletedChapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CompletedChapters.
     */
    skip?: number
    distinct?: CompletedChaptersScalarFieldEnum | CompletedChaptersScalarFieldEnum[]
  }


  /**
   * CompletedChapters create
   */
  export type CompletedChaptersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * The data needed to create a CompletedChapters.
     */
    data: XOR<CompletedChaptersCreateInput, CompletedChaptersUncheckedCreateInput>
  }


  /**
   * CompletedChapters createMany
   */
  export type CompletedChaptersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CompletedChapters.
     */
    data: CompletedChaptersCreateManyInput | CompletedChaptersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * CompletedChapters update
   */
  export type CompletedChaptersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * The data needed to update a CompletedChapters.
     */
    data: XOR<CompletedChaptersUpdateInput, CompletedChaptersUncheckedUpdateInput>
    /**
     * Choose, which CompletedChapters to update.
     */
    where: CompletedChaptersWhereUniqueInput
  }


  /**
   * CompletedChapters updateMany
   */
  export type CompletedChaptersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CompletedChapters.
     */
    data: XOR<CompletedChaptersUpdateManyMutationInput, CompletedChaptersUncheckedUpdateManyInput>
    /**
     * Filter which CompletedChapters to update
     */
    where?: CompletedChaptersWhereInput
  }


  /**
   * CompletedChapters upsert
   */
  export type CompletedChaptersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * The filter to search for the CompletedChapters to update in case it exists.
     */
    where: CompletedChaptersWhereUniqueInput
    /**
     * In case the CompletedChapters found by the `where` argument doesn't exist, create a new CompletedChapters with this data.
     */
    create: XOR<CompletedChaptersCreateInput, CompletedChaptersUncheckedCreateInput>
    /**
     * In case the CompletedChapters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompletedChaptersUpdateInput, CompletedChaptersUncheckedUpdateInput>
  }


  /**
   * CompletedChapters delete
   */
  export type CompletedChaptersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    /**
     * Filter which CompletedChapters to delete.
     */
    where: CompletedChaptersWhereUniqueInput
  }


  /**
   * CompletedChapters deleteMany
   */
  export type CompletedChaptersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CompletedChapters to delete
     */
    where?: CompletedChaptersWhereInput
  }


  /**
   * CompletedChapters.chapters
   */
  export type CompletedChapters$chaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    cursor?: ChapterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }


  /**
   * CompletedChapters without action
   */
  export type CompletedChaptersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
  }



  /**
   * Model InProgressChapters
   */

  export type AggregateInProgressChapters = {
    _count: InProgressChaptersCountAggregateOutputType | null
    _avg: InProgressChaptersAvgAggregateOutputType | null
    _sum: InProgressChaptersSumAggregateOutputType | null
    _min: InProgressChaptersMinAggregateOutputType | null
    _max: InProgressChaptersMaxAggregateOutputType | null
  }

  export type InProgressChaptersAvgAggregateOutputType = {
    inProgressChapterId: number | null
    inProgressById: number | null
  }

  export type InProgressChaptersSumAggregateOutputType = {
    inProgressChapterId: number | null
    inProgressById: number | null
  }

  export type InProgressChaptersMinAggregateOutputType = {
    inProgressChapterId: number | null
    inProgressById: number | null
  }

  export type InProgressChaptersMaxAggregateOutputType = {
    inProgressChapterId: number | null
    inProgressById: number | null
  }

  export type InProgressChaptersCountAggregateOutputType = {
    inProgressChapterId: number
    inProgressById: number
    _all: number
  }


  export type InProgressChaptersAvgAggregateInputType = {
    inProgressChapterId?: true
    inProgressById?: true
  }

  export type InProgressChaptersSumAggregateInputType = {
    inProgressChapterId?: true
    inProgressById?: true
  }

  export type InProgressChaptersMinAggregateInputType = {
    inProgressChapterId?: true
    inProgressById?: true
  }

  export type InProgressChaptersMaxAggregateInputType = {
    inProgressChapterId?: true
    inProgressById?: true
  }

  export type InProgressChaptersCountAggregateInputType = {
    inProgressChapterId?: true
    inProgressById?: true
    _all?: true
  }

  export type InProgressChaptersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InProgressChapters to aggregate.
     */
    where?: InProgressChaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InProgressChapters to fetch.
     */
    orderBy?: InProgressChaptersOrderByWithRelationInput | InProgressChaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InProgressChaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InProgressChapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InProgressChapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InProgressChapters
    **/
    _count?: true | InProgressChaptersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InProgressChaptersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InProgressChaptersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InProgressChaptersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InProgressChaptersMaxAggregateInputType
  }

  export type GetInProgressChaptersAggregateType<T extends InProgressChaptersAggregateArgs> = {
        [P in keyof T & keyof AggregateInProgressChapters]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInProgressChapters[P]>
      : GetScalarType<T[P], AggregateInProgressChapters[P]>
  }




  export type InProgressChaptersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InProgressChaptersWhereInput
    orderBy?: InProgressChaptersOrderByWithAggregationInput | InProgressChaptersOrderByWithAggregationInput[]
    by: InProgressChaptersScalarFieldEnum[] | InProgressChaptersScalarFieldEnum
    having?: InProgressChaptersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InProgressChaptersCountAggregateInputType | true
    _avg?: InProgressChaptersAvgAggregateInputType
    _sum?: InProgressChaptersSumAggregateInputType
    _min?: InProgressChaptersMinAggregateInputType
    _max?: InProgressChaptersMaxAggregateInputType
  }

  export type InProgressChaptersGroupByOutputType = {
    inProgressChapterId: number
    inProgressById: number
    _count: InProgressChaptersCountAggregateOutputType | null
    _avg: InProgressChaptersAvgAggregateOutputType | null
    _sum: InProgressChaptersSumAggregateOutputType | null
    _min: InProgressChaptersMinAggregateOutputType | null
    _max: InProgressChaptersMaxAggregateOutputType | null
  }

  type GetInProgressChaptersGroupByPayload<T extends InProgressChaptersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InProgressChaptersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InProgressChaptersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InProgressChaptersGroupByOutputType[P]>
            : GetScalarType<T[P], InProgressChaptersGroupByOutputType[P]>
        }
      >
    >


  export type InProgressChaptersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inProgressChapterId?: boolean
    inProgressById?: boolean
    chapters?: boolean | InProgressChapters$chaptersArgs<ExtArgs>
    inProgressBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | InProgressChaptersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inProgressChapters"]>

  export type InProgressChaptersSelectScalar = {
    inProgressChapterId?: boolean
    inProgressById?: boolean
  }

  export type InProgressChaptersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chapters?: boolean | InProgressChapters$chaptersArgs<ExtArgs>
    inProgressBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | InProgressChaptersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $InProgressChaptersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InProgressChapters"
    objects: {
      chapters: Prisma.$ChapterPayload<ExtArgs>[]
      inProgressBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      inProgressChapterId: number
      inProgressById: number
    }, ExtArgs["result"]["inProgressChapters"]>
    composites: {}
  }


  type InProgressChaptersGetPayload<S extends boolean | null | undefined | InProgressChaptersDefaultArgs> = $Result.GetResult<Prisma.$InProgressChaptersPayload, S>

  type InProgressChaptersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InProgressChaptersFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: InProgressChaptersCountAggregateInputType | true
    }

  export interface InProgressChaptersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InProgressChapters'], meta: { name: 'InProgressChapters' } }
    /**
     * Find zero or one InProgressChapters that matches the filter.
     * @param {InProgressChaptersFindUniqueArgs} args - Arguments to find a InProgressChapters
     * @example
     * // Get one InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends InProgressChaptersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, InProgressChaptersFindUniqueArgs<ExtArgs>>
    ): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one InProgressChapters that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {InProgressChaptersFindUniqueOrThrowArgs} args - Arguments to find a InProgressChapters
     * @example
     * // Get one InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends InProgressChaptersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InProgressChaptersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first InProgressChapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressChaptersFindFirstArgs} args - Arguments to find a InProgressChapters
     * @example
     * // Get one InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends InProgressChaptersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, InProgressChaptersFindFirstArgs<ExtArgs>>
    ): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first InProgressChapters that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressChaptersFindFirstOrThrowArgs} args - Arguments to find a InProgressChapters
     * @example
     * // Get one InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends InProgressChaptersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, InProgressChaptersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more InProgressChapters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressChaptersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.findMany()
     * 
     * // Get first 10 InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.findMany({ take: 10 })
     * 
     * // Only select the `inProgressChapterId`
     * const inProgressChaptersWithInProgressChapterIdOnly = await prisma.inProgressChapters.findMany({ select: { inProgressChapterId: true } })
     * 
    **/
    findMany<T extends InProgressChaptersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InProgressChaptersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a InProgressChapters.
     * @param {InProgressChaptersCreateArgs} args - Arguments to create a InProgressChapters.
     * @example
     * // Create one InProgressChapters
     * const InProgressChapters = await prisma.inProgressChapters.create({
     *   data: {
     *     // ... data to create a InProgressChapters
     *   }
     * })
     * 
    **/
    create<T extends InProgressChaptersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, InProgressChaptersCreateArgs<ExtArgs>>
    ): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many InProgressChapters.
     *     @param {InProgressChaptersCreateManyArgs} args - Arguments to create many InProgressChapters.
     *     @example
     *     // Create many InProgressChapters
     *     const inProgressChapters = await prisma.inProgressChapters.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends InProgressChaptersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InProgressChaptersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InProgressChapters.
     * @param {InProgressChaptersDeleteArgs} args - Arguments to delete one InProgressChapters.
     * @example
     * // Delete one InProgressChapters
     * const InProgressChapters = await prisma.inProgressChapters.delete({
     *   where: {
     *     // ... filter to delete one InProgressChapters
     *   }
     * })
     * 
    **/
    delete<T extends InProgressChaptersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, InProgressChaptersDeleteArgs<ExtArgs>>
    ): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one InProgressChapters.
     * @param {InProgressChaptersUpdateArgs} args - Arguments to update one InProgressChapters.
     * @example
     * // Update one InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends InProgressChaptersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, InProgressChaptersUpdateArgs<ExtArgs>>
    ): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more InProgressChapters.
     * @param {InProgressChaptersDeleteManyArgs} args - Arguments to filter InProgressChapters to delete.
     * @example
     * // Delete a few InProgressChapters
     * const { count } = await prisma.inProgressChapters.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends InProgressChaptersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, InProgressChaptersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InProgressChapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressChaptersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends InProgressChaptersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, InProgressChaptersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InProgressChapters.
     * @param {InProgressChaptersUpsertArgs} args - Arguments to update or create a InProgressChapters.
     * @example
     * // Update or create a InProgressChapters
     * const inProgressChapters = await prisma.inProgressChapters.upsert({
     *   create: {
     *     // ... data to create a InProgressChapters
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InProgressChapters we want to update
     *   }
     * })
    **/
    upsert<T extends InProgressChaptersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, InProgressChaptersUpsertArgs<ExtArgs>>
    ): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of InProgressChapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressChaptersCountArgs} args - Arguments to filter InProgressChapters to count.
     * @example
     * // Count the number of InProgressChapters
     * const count = await prisma.inProgressChapters.count({
     *   where: {
     *     // ... the filter for the InProgressChapters we want to count
     *   }
     * })
    **/
    count<T extends InProgressChaptersCountArgs>(
      args?: Subset<T, InProgressChaptersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InProgressChaptersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InProgressChapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressChaptersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InProgressChaptersAggregateArgs>(args: Subset<T, InProgressChaptersAggregateArgs>): Prisma.PrismaPromise<GetInProgressChaptersAggregateType<T>>

    /**
     * Group by InProgressChapters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InProgressChaptersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InProgressChaptersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InProgressChaptersGroupByArgs['orderBy'] }
        : { orderBy?: InProgressChaptersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InProgressChaptersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInProgressChaptersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InProgressChapters model
   */
  readonly fields: InProgressChaptersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InProgressChapters.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InProgressChaptersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    chapters<T extends InProgressChapters$chaptersArgs<ExtArgs> = {}>(args?: Subset<T, InProgressChapters$chaptersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChapterPayload<ExtArgs>, T, 'findMany'> | Null>;

    inProgressBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the InProgressChapters model
   */ 
  interface InProgressChaptersFieldRefs {
    readonly inProgressChapterId: FieldRef<"InProgressChapters", 'Int'>
    readonly inProgressById: FieldRef<"InProgressChapters", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * InProgressChapters findUnique
   */
  export type InProgressChaptersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * Filter, which InProgressChapters to fetch.
     */
    where: InProgressChaptersWhereUniqueInput
  }


  /**
   * InProgressChapters findUniqueOrThrow
   */
  export type InProgressChaptersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * Filter, which InProgressChapters to fetch.
     */
    where: InProgressChaptersWhereUniqueInput
  }


  /**
   * InProgressChapters findFirst
   */
  export type InProgressChaptersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * Filter, which InProgressChapters to fetch.
     */
    where?: InProgressChaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InProgressChapters to fetch.
     */
    orderBy?: InProgressChaptersOrderByWithRelationInput | InProgressChaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InProgressChapters.
     */
    cursor?: InProgressChaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InProgressChapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InProgressChapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InProgressChapters.
     */
    distinct?: InProgressChaptersScalarFieldEnum | InProgressChaptersScalarFieldEnum[]
  }


  /**
   * InProgressChapters findFirstOrThrow
   */
  export type InProgressChaptersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * Filter, which InProgressChapters to fetch.
     */
    where?: InProgressChaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InProgressChapters to fetch.
     */
    orderBy?: InProgressChaptersOrderByWithRelationInput | InProgressChaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InProgressChapters.
     */
    cursor?: InProgressChaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InProgressChapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InProgressChapters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InProgressChapters.
     */
    distinct?: InProgressChaptersScalarFieldEnum | InProgressChaptersScalarFieldEnum[]
  }


  /**
   * InProgressChapters findMany
   */
  export type InProgressChaptersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * Filter, which InProgressChapters to fetch.
     */
    where?: InProgressChaptersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InProgressChapters to fetch.
     */
    orderBy?: InProgressChaptersOrderByWithRelationInput | InProgressChaptersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InProgressChapters.
     */
    cursor?: InProgressChaptersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InProgressChapters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InProgressChapters.
     */
    skip?: number
    distinct?: InProgressChaptersScalarFieldEnum | InProgressChaptersScalarFieldEnum[]
  }


  /**
   * InProgressChapters create
   */
  export type InProgressChaptersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * The data needed to create a InProgressChapters.
     */
    data: XOR<InProgressChaptersCreateInput, InProgressChaptersUncheckedCreateInput>
  }


  /**
   * InProgressChapters createMany
   */
  export type InProgressChaptersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InProgressChapters.
     */
    data: InProgressChaptersCreateManyInput | InProgressChaptersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * InProgressChapters update
   */
  export type InProgressChaptersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * The data needed to update a InProgressChapters.
     */
    data: XOR<InProgressChaptersUpdateInput, InProgressChaptersUncheckedUpdateInput>
    /**
     * Choose, which InProgressChapters to update.
     */
    where: InProgressChaptersWhereUniqueInput
  }


  /**
   * InProgressChapters updateMany
   */
  export type InProgressChaptersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InProgressChapters.
     */
    data: XOR<InProgressChaptersUpdateManyMutationInput, InProgressChaptersUncheckedUpdateManyInput>
    /**
     * Filter which InProgressChapters to update
     */
    where?: InProgressChaptersWhereInput
  }


  /**
   * InProgressChapters upsert
   */
  export type InProgressChaptersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * The filter to search for the InProgressChapters to update in case it exists.
     */
    where: InProgressChaptersWhereUniqueInput
    /**
     * In case the InProgressChapters found by the `where` argument doesn't exist, create a new InProgressChapters with this data.
     */
    create: XOR<InProgressChaptersCreateInput, InProgressChaptersUncheckedCreateInput>
    /**
     * In case the InProgressChapters was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InProgressChaptersUpdateInput, InProgressChaptersUncheckedUpdateInput>
  }


  /**
   * InProgressChapters delete
   */
  export type InProgressChaptersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    /**
     * Filter which InProgressChapters to delete.
     */
    where: InProgressChaptersWhereUniqueInput
  }


  /**
   * InProgressChapters deleteMany
   */
  export type InProgressChaptersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InProgressChapters to delete
     */
    where?: InProgressChaptersWhereInput
  }


  /**
   * InProgressChapters.chapters
   */
  export type InProgressChapters$chaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Chapter
     */
    select?: ChapterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChapterInclude<ExtArgs> | null
    where?: ChapterWhereInput
    orderBy?: ChapterOrderByWithRelationInput | ChapterOrderByWithRelationInput[]
    cursor?: ChapterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChapterScalarFieldEnum | ChapterScalarFieldEnum[]
  }


  /**
   * InProgressChapters without action
   */
  export type InProgressChaptersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
  }



  /**
   * Model SavedStories
   */

  export type AggregateSavedStories = {
    _count: SavedStoriesCountAggregateOutputType | null
    _avg: SavedStoriesAvgAggregateOutputType | null
    _sum: SavedStoriesSumAggregateOutputType | null
    _min: SavedStoriesMinAggregateOutputType | null
    _max: SavedStoriesMaxAggregateOutputType | null
  }

  export type SavedStoriesAvgAggregateOutputType = {
    savedStoryId: number | null
    savedById: number | null
  }

  export type SavedStoriesSumAggregateOutputType = {
    savedStoryId: number | null
    savedById: number | null
  }

  export type SavedStoriesMinAggregateOutputType = {
    savedStoryId: number | null
    savedById: number | null
  }

  export type SavedStoriesMaxAggregateOutputType = {
    savedStoryId: number | null
    savedById: number | null
  }

  export type SavedStoriesCountAggregateOutputType = {
    savedStoryId: number
    savedById: number
    _all: number
  }


  export type SavedStoriesAvgAggregateInputType = {
    savedStoryId?: true
    savedById?: true
  }

  export type SavedStoriesSumAggregateInputType = {
    savedStoryId?: true
    savedById?: true
  }

  export type SavedStoriesMinAggregateInputType = {
    savedStoryId?: true
    savedById?: true
  }

  export type SavedStoriesMaxAggregateInputType = {
    savedStoryId?: true
    savedById?: true
  }

  export type SavedStoriesCountAggregateInputType = {
    savedStoryId?: true
    savedById?: true
    _all?: true
  }

  export type SavedStoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedStories to aggregate.
     */
    where?: SavedStoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedStories to fetch.
     */
    orderBy?: SavedStoriesOrderByWithRelationInput | SavedStoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SavedStoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavedStories
    **/
    _count?: true | SavedStoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SavedStoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SavedStoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedStoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedStoriesMaxAggregateInputType
  }

  export type GetSavedStoriesAggregateType<T extends SavedStoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedStories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedStories[P]>
      : GetScalarType<T[P], AggregateSavedStories[P]>
  }




  export type SavedStoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SavedStoriesWhereInput
    orderBy?: SavedStoriesOrderByWithAggregationInput | SavedStoriesOrderByWithAggregationInput[]
    by: SavedStoriesScalarFieldEnum[] | SavedStoriesScalarFieldEnum
    having?: SavedStoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedStoriesCountAggregateInputType | true
    _avg?: SavedStoriesAvgAggregateInputType
    _sum?: SavedStoriesSumAggregateInputType
    _min?: SavedStoriesMinAggregateInputType
    _max?: SavedStoriesMaxAggregateInputType
  }

  export type SavedStoriesGroupByOutputType = {
    savedStoryId: number
    savedById: number
    _count: SavedStoriesCountAggregateOutputType | null
    _avg: SavedStoriesAvgAggregateOutputType | null
    _sum: SavedStoriesSumAggregateOutputType | null
    _min: SavedStoriesMinAggregateOutputType | null
    _max: SavedStoriesMaxAggregateOutputType | null
  }

  type GetSavedStoriesGroupByPayload<T extends SavedStoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SavedStoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedStoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedStoriesGroupByOutputType[P]>
            : GetScalarType<T[P], SavedStoriesGroupByOutputType[P]>
        }
      >
    >


  export type SavedStoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    savedStoryId?: boolean
    savedById?: boolean
    stories?: boolean | SavedStories$storiesArgs<ExtArgs>
    savedBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | SavedStoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedStories"]>

  export type SavedStoriesSelectScalar = {
    savedStoryId?: boolean
    savedById?: boolean
  }

  export type SavedStoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stories?: boolean | SavedStories$storiesArgs<ExtArgs>
    savedBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | SavedStoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SavedStoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SavedStories"
    objects: {
      stories: Prisma.$StoryPayload<ExtArgs>[]
      savedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      savedStoryId: number
      savedById: number
    }, ExtArgs["result"]["savedStories"]>
    composites: {}
  }


  type SavedStoriesGetPayload<S extends boolean | null | undefined | SavedStoriesDefaultArgs> = $Result.GetResult<Prisma.$SavedStoriesPayload, S>

  type SavedStoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SavedStoriesFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: SavedStoriesCountAggregateInputType | true
    }

  export interface SavedStoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SavedStories'], meta: { name: 'SavedStories' } }
    /**
     * Find zero or one SavedStories that matches the filter.
     * @param {SavedStoriesFindUniqueArgs} args - Arguments to find a SavedStories
     * @example
     * // Get one SavedStories
     * const savedStories = await prisma.savedStories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SavedStoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SavedStoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one SavedStories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SavedStoriesFindUniqueOrThrowArgs} args - Arguments to find a SavedStories
     * @example
     * // Get one SavedStories
     * const savedStories = await prisma.savedStories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SavedStoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedStoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first SavedStories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedStoriesFindFirstArgs} args - Arguments to find a SavedStories
     * @example
     * // Get one SavedStories
     * const savedStories = await prisma.savedStories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SavedStoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedStoriesFindFirstArgs<ExtArgs>>
    ): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first SavedStories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedStoriesFindFirstOrThrowArgs} args - Arguments to find a SavedStories
     * @example
     * // Get one SavedStories
     * const savedStories = await prisma.savedStories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SavedStoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedStoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more SavedStories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedStoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedStories
     * const savedStories = await prisma.savedStories.findMany()
     * 
     * // Get first 10 SavedStories
     * const savedStories = await prisma.savedStories.findMany({ take: 10 })
     * 
     * // Only select the `savedStoryId`
     * const savedStoriesWithSavedStoryIdOnly = await prisma.savedStories.findMany({ select: { savedStoryId: true } })
     * 
    **/
    findMany<T extends SavedStoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedStoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a SavedStories.
     * @param {SavedStoriesCreateArgs} args - Arguments to create a SavedStories.
     * @example
     * // Create one SavedStories
     * const SavedStories = await prisma.savedStories.create({
     *   data: {
     *     // ... data to create a SavedStories
     *   }
     * })
     * 
    **/
    create<T extends SavedStoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SavedStoriesCreateArgs<ExtArgs>>
    ): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many SavedStories.
     *     @param {SavedStoriesCreateManyArgs} args - Arguments to create many SavedStories.
     *     @example
     *     // Create many SavedStories
     *     const savedStories = await prisma.savedStories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SavedStoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedStoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SavedStories.
     * @param {SavedStoriesDeleteArgs} args - Arguments to delete one SavedStories.
     * @example
     * // Delete one SavedStories
     * const SavedStories = await prisma.savedStories.delete({
     *   where: {
     *     // ... filter to delete one SavedStories
     *   }
     * })
     * 
    **/
    delete<T extends SavedStoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SavedStoriesDeleteArgs<ExtArgs>>
    ): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one SavedStories.
     * @param {SavedStoriesUpdateArgs} args - Arguments to update one SavedStories.
     * @example
     * // Update one SavedStories
     * const savedStories = await prisma.savedStories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SavedStoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SavedStoriesUpdateArgs<ExtArgs>>
    ): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more SavedStories.
     * @param {SavedStoriesDeleteManyArgs} args - Arguments to filter SavedStories to delete.
     * @example
     * // Delete a few SavedStories
     * const { count } = await prisma.savedStories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SavedStoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SavedStoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedStoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedStories
     * const savedStories = await prisma.savedStories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SavedStoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SavedStoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SavedStories.
     * @param {SavedStoriesUpsertArgs} args - Arguments to update or create a SavedStories.
     * @example
     * // Update or create a SavedStories
     * const savedStories = await prisma.savedStories.upsert({
     *   create: {
     *     // ... data to create a SavedStories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedStories we want to update
     *   }
     * })
    **/
    upsert<T extends SavedStoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SavedStoriesUpsertArgs<ExtArgs>>
    ): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of SavedStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedStoriesCountArgs} args - Arguments to filter SavedStories to count.
     * @example
     * // Count the number of SavedStories
     * const count = await prisma.savedStories.count({
     *   where: {
     *     // ... the filter for the SavedStories we want to count
     *   }
     * })
    **/
    count<T extends SavedStoriesCountArgs>(
      args?: Subset<T, SavedStoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedStoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedStoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedStoriesAggregateArgs>(args: Subset<T, SavedStoriesAggregateArgs>): Prisma.PrismaPromise<GetSavedStoriesAggregateType<T>>

    /**
     * Group by SavedStories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedStoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavedStoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavedStoriesGroupByArgs['orderBy'] }
        : { orderBy?: SavedStoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavedStoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedStoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SavedStories model
   */
  readonly fields: SavedStoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SavedStories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SavedStoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    stories<T extends SavedStories$storiesArgs<ExtArgs> = {}>(args?: Subset<T, SavedStories$storiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    savedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the SavedStories model
   */ 
  interface SavedStoriesFieldRefs {
    readonly savedStoryId: FieldRef<"SavedStories", 'Int'>
    readonly savedById: FieldRef<"SavedStories", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * SavedStories findUnique
   */
  export type SavedStoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * Filter, which SavedStories to fetch.
     */
    where: SavedStoriesWhereUniqueInput
  }


  /**
   * SavedStories findUniqueOrThrow
   */
  export type SavedStoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * Filter, which SavedStories to fetch.
     */
    where: SavedStoriesWhereUniqueInput
  }


  /**
   * SavedStories findFirst
   */
  export type SavedStoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * Filter, which SavedStories to fetch.
     */
    where?: SavedStoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedStories to fetch.
     */
    orderBy?: SavedStoriesOrderByWithRelationInput | SavedStoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedStories.
     */
    cursor?: SavedStoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedStories.
     */
    distinct?: SavedStoriesScalarFieldEnum | SavedStoriesScalarFieldEnum[]
  }


  /**
   * SavedStories findFirstOrThrow
   */
  export type SavedStoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * Filter, which SavedStories to fetch.
     */
    where?: SavedStoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedStories to fetch.
     */
    orderBy?: SavedStoriesOrderByWithRelationInput | SavedStoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavedStories.
     */
    cursor?: SavedStoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedStories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavedStories.
     */
    distinct?: SavedStoriesScalarFieldEnum | SavedStoriesScalarFieldEnum[]
  }


  /**
   * SavedStories findMany
   */
  export type SavedStoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * Filter, which SavedStories to fetch.
     */
    where?: SavedStoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavedStories to fetch.
     */
    orderBy?: SavedStoriesOrderByWithRelationInput | SavedStoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavedStories.
     */
    cursor?: SavedStoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavedStories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavedStories.
     */
    skip?: number
    distinct?: SavedStoriesScalarFieldEnum | SavedStoriesScalarFieldEnum[]
  }


  /**
   * SavedStories create
   */
  export type SavedStoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a SavedStories.
     */
    data: XOR<SavedStoriesCreateInput, SavedStoriesUncheckedCreateInput>
  }


  /**
   * SavedStories createMany
   */
  export type SavedStoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SavedStories.
     */
    data: SavedStoriesCreateManyInput | SavedStoriesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * SavedStories update
   */
  export type SavedStoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a SavedStories.
     */
    data: XOR<SavedStoriesUpdateInput, SavedStoriesUncheckedUpdateInput>
    /**
     * Choose, which SavedStories to update.
     */
    where: SavedStoriesWhereUniqueInput
  }


  /**
   * SavedStories updateMany
   */
  export type SavedStoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SavedStories.
     */
    data: XOR<SavedStoriesUpdateManyMutationInput, SavedStoriesUncheckedUpdateManyInput>
    /**
     * Filter which SavedStories to update
     */
    where?: SavedStoriesWhereInput
  }


  /**
   * SavedStories upsert
   */
  export type SavedStoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the SavedStories to update in case it exists.
     */
    where: SavedStoriesWhereUniqueInput
    /**
     * In case the SavedStories found by the `where` argument doesn't exist, create a new SavedStories with this data.
     */
    create: XOR<SavedStoriesCreateInput, SavedStoriesUncheckedCreateInput>
    /**
     * In case the SavedStories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SavedStoriesUpdateInput, SavedStoriesUncheckedUpdateInput>
  }


  /**
   * SavedStories delete
   */
  export type SavedStoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    /**
     * Filter which SavedStories to delete.
     */
    where: SavedStoriesWhereUniqueInput
  }


  /**
   * SavedStories deleteMany
   */
  export type SavedStoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SavedStories to delete
     */
    where?: SavedStoriesWhereInput
  }


  /**
   * SavedStories.stories
   */
  export type SavedStories$storiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    cursor?: StoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }


  /**
   * SavedStories without action
   */
  export type SavedStoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
  }



  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    phoneNumber: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    phoneNumber: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    phoneNumber: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    phoneNumber?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    phoneNumber?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    phoneNumber?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string | null
    name: string
    password: string
    phoneNumber: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    phoneNumber?: boolean
    createdStories?: boolean | User$createdStoriesArgs<ExtArgs>
    completedChapters?: boolean | User$completedChaptersArgs<ExtArgs>
    inProgressChapters?: boolean | User$inProgressChaptersArgs<ExtArgs>
    savedStories?: boolean | User$savedStoriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    phoneNumber?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdStories?: boolean | User$createdStoriesArgs<ExtArgs>
    completedChapters?: boolean | User$completedChaptersArgs<ExtArgs>
    inProgressChapters?: boolean | User$inProgressChaptersArgs<ExtArgs>
    savedStories?: boolean | User$savedStoriesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdStories: Prisma.$StoryPayload<ExtArgs>[]
      completedChapters: Prisma.$CompletedChaptersPayload<ExtArgs> | null
      inProgressChapters: Prisma.$InProgressChaptersPayload<ExtArgs> | null
      savedStories: Prisma.$SavedStoriesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string | null
      name: string
      password: string
      phoneNumber: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    createdStories<T extends User$createdStoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdStoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    completedChapters<T extends User$completedChaptersArgs<ExtArgs> = {}>(args?: Subset<T, User$completedChaptersArgs<ExtArgs>>): Prisma__CompletedChaptersClient<$Result.GetResult<Prisma.$CompletedChaptersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    inProgressChapters<T extends User$inProgressChaptersArgs<ExtArgs> = {}>(args?: Subset<T, User$inProgressChaptersArgs<ExtArgs>>): Prisma__InProgressChaptersClient<$Result.GetResult<Prisma.$InProgressChaptersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    savedStories<T extends User$savedStoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$savedStoriesArgs<ExtArgs>>): Prisma__SavedStoriesClient<$Result.GetResult<Prisma.$SavedStoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.createdStories
   */
  export type User$createdStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Story
     */
    select?: StorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: StoryInclude<ExtArgs> | null
    where?: StoryWhereInput
    orderBy?: StoryOrderByWithRelationInput | StoryOrderByWithRelationInput[]
    cursor?: StoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoryScalarFieldEnum | StoryScalarFieldEnum[]
  }


  /**
   * User.completedChapters
   */
  export type User$completedChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompletedChapters
     */
    select?: CompletedChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompletedChaptersInclude<ExtArgs> | null
    where?: CompletedChaptersWhereInput
  }


  /**
   * User.inProgressChapters
   */
  export type User$inProgressChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InProgressChapters
     */
    select?: InProgressChaptersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: InProgressChaptersInclude<ExtArgs> | null
    where?: InProgressChaptersWhereInput
  }


  /**
   * User.savedStories
   */
  export type User$savedStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SavedStories
     */
    select?: SavedStoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SavedStoriesInclude<ExtArgs> | null
    where?: SavedStoriesWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StoryScalarFieldEnum: {
    id: 'id',
    description: 'description',
    name: 'name',
    userId: 'userId'
  };

  export type StoryScalarFieldEnum = (typeof StoryScalarFieldEnum)[keyof typeof StoryScalarFieldEnum]


  export const ChapterScalarFieldEnum: {
    id: 'id',
    description: 'description',
    details: 'details',
    latitude: 'latitude',
    longitude: 'longitude',
    name: 'name',
    passcode: 'passcode',
    order: 'order',
    secretText: 'secretText',
    storyId: 'storyId'
  };

  export type ChapterScalarFieldEnum = (typeof ChapterScalarFieldEnum)[keyof typeof ChapterScalarFieldEnum]


  export const CompletedChaptersScalarFieldEnum: {
    completedChapterId: 'completedChapterId',
    completedById: 'completedById'
  };

  export type CompletedChaptersScalarFieldEnum = (typeof CompletedChaptersScalarFieldEnum)[keyof typeof CompletedChaptersScalarFieldEnum]


  export const InProgressChaptersScalarFieldEnum: {
    inProgressChapterId: 'inProgressChapterId',
    inProgressById: 'inProgressById'
  };

  export type InProgressChaptersScalarFieldEnum = (typeof InProgressChaptersScalarFieldEnum)[keyof typeof InProgressChaptersScalarFieldEnum]


  export const SavedStoriesScalarFieldEnum: {
    savedStoryId: 'savedStoryId',
    savedById: 'savedById'
  };

  export type SavedStoriesScalarFieldEnum = (typeof SavedStoriesScalarFieldEnum)[keyof typeof SavedStoriesScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    phoneNumber: 'phoneNumber'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StoryWhereInput = {
    AND?: StoryWhereInput | StoryWhereInput[]
    OR?: StoryWhereInput[]
    NOT?: StoryWhereInput | StoryWhereInput[]
    id?: IntFilter<"Story"> | number
    description?: StringNullableFilter<"Story"> | string | null
    name?: StringFilter<"Story"> | string
    userId?: IntFilter<"Story"> | number
    owner?: XOR<UserRelationFilter, UserWhereInput>
    chapters?: ChapterListRelationFilter
    savedStories?: SavedStoriesListRelationFilter
  }

  export type StoryOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    name?: SortOrder
    userId?: SortOrder
    owner?: UserOrderByWithRelationInput
    chapters?: ChapterOrderByRelationAggregateInput
    savedStories?: SavedStoriesOrderByRelationAggregateInput
  }

  export type StoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    name_userId?: StoryNameUserIdCompoundUniqueInput
    AND?: StoryWhereInput | StoryWhereInput[]
    OR?: StoryWhereInput[]
    NOT?: StoryWhereInput | StoryWhereInput[]
    description?: StringNullableFilter<"Story"> | string | null
    name?: StringFilter<"Story"> | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    chapters?: ChapterListRelationFilter
    savedStories?: SavedStoriesListRelationFilter
  }, "id" | "userId" | "name_userId">

  export type StoryOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    name?: SortOrder
    userId?: SortOrder
    _count?: StoryCountOrderByAggregateInput
    _avg?: StoryAvgOrderByAggregateInput
    _max?: StoryMaxOrderByAggregateInput
    _min?: StoryMinOrderByAggregateInput
    _sum?: StorySumOrderByAggregateInput
  }

  export type StoryScalarWhereWithAggregatesInput = {
    AND?: StoryScalarWhereWithAggregatesInput | StoryScalarWhereWithAggregatesInput[]
    OR?: StoryScalarWhereWithAggregatesInput[]
    NOT?: StoryScalarWhereWithAggregatesInput | StoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Story"> | number
    description?: StringNullableWithAggregatesFilter<"Story"> | string | null
    name?: StringWithAggregatesFilter<"Story"> | string
    userId?: IntWithAggregatesFilter<"Story"> | number
  }

  export type ChapterWhereInput = {
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    id?: IntFilter<"Chapter"> | number
    description?: StringFilter<"Chapter"> | string
    details?: StringFilter<"Chapter"> | string
    latitude?: FloatFilter<"Chapter"> | number
    longitude?: FloatFilter<"Chapter"> | number
    name?: StringFilter<"Chapter"> | string
    passcode?: StringNullableFilter<"Chapter"> | string | null
    order?: IntFilter<"Chapter"> | number
    secretText?: StringNullableFilter<"Chapter"> | string | null
    storyId?: IntFilter<"Chapter"> | number
    story?: XOR<StoryRelationFilter, StoryWhereInput>
    completedChapters?: CompletedChaptersListRelationFilter
    inProgressChapters?: InProgressChaptersListRelationFilter
  }

  export type ChapterOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    details?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    name?: SortOrder
    passcode?: SortOrderInput | SortOrder
    order?: SortOrder
    secretText?: SortOrderInput | SortOrder
    storyId?: SortOrder
    story?: StoryOrderByWithRelationInput
    completedChapters?: CompletedChaptersOrderByRelationAggregateInput
    inProgressChapters?: InProgressChaptersOrderByRelationAggregateInput
  }

  export type ChapterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name_storyId?: ChapterNameStoryIdCompoundUniqueInput
    AND?: ChapterWhereInput | ChapterWhereInput[]
    OR?: ChapterWhereInput[]
    NOT?: ChapterWhereInput | ChapterWhereInput[]
    description?: StringFilter<"Chapter"> | string
    details?: StringFilter<"Chapter"> | string
    latitude?: FloatFilter<"Chapter"> | number
    longitude?: FloatFilter<"Chapter"> | number
    name?: StringFilter<"Chapter"> | string
    passcode?: StringNullableFilter<"Chapter"> | string | null
    order?: IntFilter<"Chapter"> | number
    secretText?: StringNullableFilter<"Chapter"> | string | null
    storyId?: IntFilter<"Chapter"> | number
    story?: XOR<StoryRelationFilter, StoryWhereInput>
    completedChapters?: CompletedChaptersListRelationFilter
    inProgressChapters?: InProgressChaptersListRelationFilter
  }, "id" | "name_storyId">

  export type ChapterOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    details?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    name?: SortOrder
    passcode?: SortOrderInput | SortOrder
    order?: SortOrder
    secretText?: SortOrderInput | SortOrder
    storyId?: SortOrder
    _count?: ChapterCountOrderByAggregateInput
    _avg?: ChapterAvgOrderByAggregateInput
    _max?: ChapterMaxOrderByAggregateInput
    _min?: ChapterMinOrderByAggregateInput
    _sum?: ChapterSumOrderByAggregateInput
  }

  export type ChapterScalarWhereWithAggregatesInput = {
    AND?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    OR?: ChapterScalarWhereWithAggregatesInput[]
    NOT?: ChapterScalarWhereWithAggregatesInput | ChapterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Chapter"> | number
    description?: StringWithAggregatesFilter<"Chapter"> | string
    details?: StringWithAggregatesFilter<"Chapter"> | string
    latitude?: FloatWithAggregatesFilter<"Chapter"> | number
    longitude?: FloatWithAggregatesFilter<"Chapter"> | number
    name?: StringWithAggregatesFilter<"Chapter"> | string
    passcode?: StringNullableWithAggregatesFilter<"Chapter"> | string | null
    order?: IntWithAggregatesFilter<"Chapter"> | number
    secretText?: StringNullableWithAggregatesFilter<"Chapter"> | string | null
    storyId?: IntWithAggregatesFilter<"Chapter"> | number
  }

  export type CompletedChaptersWhereInput = {
    AND?: CompletedChaptersWhereInput | CompletedChaptersWhereInput[]
    OR?: CompletedChaptersWhereInput[]
    NOT?: CompletedChaptersWhereInput | CompletedChaptersWhereInput[]
    completedChapterId?: IntFilter<"CompletedChapters"> | number
    completedById?: IntFilter<"CompletedChapters"> | number
    chapters?: ChapterListRelationFilter
    completedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CompletedChaptersOrderByWithRelationInput = {
    completedChapterId?: SortOrder
    completedById?: SortOrder
    chapters?: ChapterOrderByRelationAggregateInput
    completedBy?: UserOrderByWithRelationInput
  }

  export type CompletedChaptersWhereUniqueInput = Prisma.AtLeast<{
    completedById?: number
    AND?: CompletedChaptersWhereInput | CompletedChaptersWhereInput[]
    OR?: CompletedChaptersWhereInput[]
    NOT?: CompletedChaptersWhereInput | CompletedChaptersWhereInput[]
    completedChapterId?: IntFilter<"CompletedChapters"> | number
    chapters?: ChapterListRelationFilter
    completedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "completedById">

  export type CompletedChaptersOrderByWithAggregationInput = {
    completedChapterId?: SortOrder
    completedById?: SortOrder
    _count?: CompletedChaptersCountOrderByAggregateInput
    _avg?: CompletedChaptersAvgOrderByAggregateInput
    _max?: CompletedChaptersMaxOrderByAggregateInput
    _min?: CompletedChaptersMinOrderByAggregateInput
    _sum?: CompletedChaptersSumOrderByAggregateInput
  }

  export type CompletedChaptersScalarWhereWithAggregatesInput = {
    AND?: CompletedChaptersScalarWhereWithAggregatesInput | CompletedChaptersScalarWhereWithAggregatesInput[]
    OR?: CompletedChaptersScalarWhereWithAggregatesInput[]
    NOT?: CompletedChaptersScalarWhereWithAggregatesInput | CompletedChaptersScalarWhereWithAggregatesInput[]
    completedChapterId?: IntWithAggregatesFilter<"CompletedChapters"> | number
    completedById?: IntWithAggregatesFilter<"CompletedChapters"> | number
  }

  export type InProgressChaptersWhereInput = {
    AND?: InProgressChaptersWhereInput | InProgressChaptersWhereInput[]
    OR?: InProgressChaptersWhereInput[]
    NOT?: InProgressChaptersWhereInput | InProgressChaptersWhereInput[]
    inProgressChapterId?: IntFilter<"InProgressChapters"> | number
    inProgressById?: IntFilter<"InProgressChapters"> | number
    chapters?: ChapterListRelationFilter
    inProgressBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type InProgressChaptersOrderByWithRelationInput = {
    inProgressChapterId?: SortOrder
    inProgressById?: SortOrder
    chapters?: ChapterOrderByRelationAggregateInput
    inProgressBy?: UserOrderByWithRelationInput
  }

  export type InProgressChaptersWhereUniqueInput = Prisma.AtLeast<{
    inProgressById?: number
    AND?: InProgressChaptersWhereInput | InProgressChaptersWhereInput[]
    OR?: InProgressChaptersWhereInput[]
    NOT?: InProgressChaptersWhereInput | InProgressChaptersWhereInput[]
    inProgressChapterId?: IntFilter<"InProgressChapters"> | number
    chapters?: ChapterListRelationFilter
    inProgressBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "inProgressById">

  export type InProgressChaptersOrderByWithAggregationInput = {
    inProgressChapterId?: SortOrder
    inProgressById?: SortOrder
    _count?: InProgressChaptersCountOrderByAggregateInput
    _avg?: InProgressChaptersAvgOrderByAggregateInput
    _max?: InProgressChaptersMaxOrderByAggregateInput
    _min?: InProgressChaptersMinOrderByAggregateInput
    _sum?: InProgressChaptersSumOrderByAggregateInput
  }

  export type InProgressChaptersScalarWhereWithAggregatesInput = {
    AND?: InProgressChaptersScalarWhereWithAggregatesInput | InProgressChaptersScalarWhereWithAggregatesInput[]
    OR?: InProgressChaptersScalarWhereWithAggregatesInput[]
    NOT?: InProgressChaptersScalarWhereWithAggregatesInput | InProgressChaptersScalarWhereWithAggregatesInput[]
    inProgressChapterId?: IntWithAggregatesFilter<"InProgressChapters"> | number
    inProgressById?: IntWithAggregatesFilter<"InProgressChapters"> | number
  }

  export type SavedStoriesWhereInput = {
    AND?: SavedStoriesWhereInput | SavedStoriesWhereInput[]
    OR?: SavedStoriesWhereInput[]
    NOT?: SavedStoriesWhereInput | SavedStoriesWhereInput[]
    savedStoryId?: IntFilter<"SavedStories"> | number
    savedById?: IntFilter<"SavedStories"> | number
    stories?: StoryListRelationFilter
    savedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SavedStoriesOrderByWithRelationInput = {
    savedStoryId?: SortOrder
    savedById?: SortOrder
    stories?: StoryOrderByRelationAggregateInput
    savedBy?: UserOrderByWithRelationInput
  }

  export type SavedStoriesWhereUniqueInput = Prisma.AtLeast<{
    savedById?: number
    AND?: SavedStoriesWhereInput | SavedStoriesWhereInput[]
    OR?: SavedStoriesWhereInput[]
    NOT?: SavedStoriesWhereInput | SavedStoriesWhereInput[]
    savedStoryId?: IntFilter<"SavedStories"> | number
    stories?: StoryListRelationFilter
    savedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "savedById">

  export type SavedStoriesOrderByWithAggregationInput = {
    savedStoryId?: SortOrder
    savedById?: SortOrder
    _count?: SavedStoriesCountOrderByAggregateInput
    _avg?: SavedStoriesAvgOrderByAggregateInput
    _max?: SavedStoriesMaxOrderByAggregateInput
    _min?: SavedStoriesMinOrderByAggregateInput
    _sum?: SavedStoriesSumOrderByAggregateInput
  }

  export type SavedStoriesScalarWhereWithAggregatesInput = {
    AND?: SavedStoriesScalarWhereWithAggregatesInput | SavedStoriesScalarWhereWithAggregatesInput[]
    OR?: SavedStoriesScalarWhereWithAggregatesInput[]
    NOT?: SavedStoriesScalarWhereWithAggregatesInput | SavedStoriesScalarWhereWithAggregatesInput[]
    savedStoryId?: IntWithAggregatesFilter<"SavedStories"> | number
    savedById?: IntWithAggregatesFilter<"SavedStories"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringNullableFilter<"User"> | string | null
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringNullableFilter<"User"> | string | null
    createdStories?: StoryListRelationFilter
    completedChapters?: XOR<CompletedChaptersNullableRelationFilter, CompletedChaptersWhereInput> | null
    inProgressChapters?: XOR<InProgressChaptersNullableRelationFilter, InProgressChaptersWhereInput> | null
    savedStories?: XOR<SavedStoriesNullableRelationFilter, SavedStoriesWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdStories?: StoryOrderByRelationAggregateInput
    completedChapters?: CompletedChaptersOrderByWithRelationInput
    inProgressChapters?: InProgressChaptersOrderByWithRelationInput
    savedStories?: SavedStoriesOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phoneNumber?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdStories?: StoryListRelationFilter
    completedChapters?: XOR<CompletedChaptersNullableRelationFilter, CompletedChaptersWhereInput> | null
    inProgressChapters?: XOR<InProgressChaptersNullableRelationFilter, InProgressChaptersWhereInput> | null
    savedStories?: XOR<SavedStoriesNullableRelationFilter, SavedStoriesWhereInput> | null
  }, "id" | "email" | "phoneNumber">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrderInput | SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type StoryCreateInput = {
    description?: string | null
    name: string
    owner: UserCreateNestedOneWithoutCreatedStoriesInput
    chapters?: ChapterCreateNestedManyWithoutStoryInput
    savedStories?: SavedStoriesCreateNestedManyWithoutStoriesInput
  }

  export type StoryUncheckedCreateInput = {
    id?: number
    description?: string | null
    name: string
    userId: number
    chapters?: ChapterUncheckedCreateNestedManyWithoutStoryInput
    savedStories?: SavedStoriesUncheckedCreateNestedManyWithoutStoriesInput
  }

  export type StoryUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutCreatedStoriesNestedInput
    chapters?: ChapterUpdateManyWithoutStoryNestedInput
    savedStories?: SavedStoriesUpdateManyWithoutStoriesNestedInput
  }

  export type StoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUncheckedUpdateManyWithoutStoryNestedInput
    savedStories?: SavedStoriesUncheckedUpdateManyWithoutStoriesNestedInput
  }

  export type StoryCreateManyInput = {
    id?: number
    description?: string | null
    name: string
    userId: number
  }

  export type StoryUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ChapterCreateInput = {
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    story: StoryCreateNestedOneWithoutChaptersInput
    completedChapters?: CompletedChaptersCreateNestedManyWithoutChaptersInput
    inProgressChapters?: InProgressChaptersCreateNestedManyWithoutChaptersInput
  }

  export type ChapterUncheckedCreateInput = {
    id?: number
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    storyId: number
    completedChapters?: CompletedChaptersUncheckedCreateNestedManyWithoutChaptersInput
    inProgressChapters?: InProgressChaptersUncheckedCreateNestedManyWithoutChaptersInput
  }

  export type ChapterUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    story?: StoryUpdateOneRequiredWithoutChaptersNestedInput
    completedChapters?: CompletedChaptersUpdateManyWithoutChaptersNestedInput
    inProgressChapters?: InProgressChaptersUpdateManyWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: IntFieldUpdateOperationsInput | number
    completedChapters?: CompletedChaptersUncheckedUpdateManyWithoutChaptersNestedInput
    inProgressChapters?: InProgressChaptersUncheckedUpdateManyWithoutChaptersNestedInput
  }

  export type ChapterCreateManyInput = {
    id?: number
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    storyId: number
  }

  export type ChapterUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChapterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: IntFieldUpdateOperationsInput | number
  }

  export type CompletedChaptersCreateInput = {
    completedChapterId: number
    chapters?: ChapterCreateNestedManyWithoutCompletedChaptersInput
    completedBy: UserCreateNestedOneWithoutCompletedChaptersInput
  }

  export type CompletedChaptersUncheckedCreateInput = {
    completedChapterId: number
    completedById: number
    chapters?: ChapterUncheckedCreateNestedManyWithoutCompletedChaptersInput
  }

  export type CompletedChaptersUpdateInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUpdateManyWithoutCompletedChaptersNestedInput
    completedBy?: UserUpdateOneRequiredWithoutCompletedChaptersNestedInput
  }

  export type CompletedChaptersUncheckedUpdateInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
    completedById?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUncheckedUpdateManyWithoutCompletedChaptersNestedInput
  }

  export type CompletedChaptersCreateManyInput = {
    completedChapterId: number
    completedById: number
  }

  export type CompletedChaptersUpdateManyMutationInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
  }

  export type CompletedChaptersUncheckedUpdateManyInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
    completedById?: IntFieldUpdateOperationsInput | number
  }

  export type InProgressChaptersCreateInput = {
    inProgressChapterId: number
    chapters?: ChapterCreateNestedManyWithoutInProgressChaptersInput
    inProgressBy: UserCreateNestedOneWithoutInProgressChaptersInput
  }

  export type InProgressChaptersUncheckedCreateInput = {
    inProgressChapterId: number
    inProgressById: number
    chapters?: ChapterUncheckedCreateNestedManyWithoutInProgressChaptersInput
  }

  export type InProgressChaptersUpdateInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUpdateManyWithoutInProgressChaptersNestedInput
    inProgressBy?: UserUpdateOneRequiredWithoutInProgressChaptersNestedInput
  }

  export type InProgressChaptersUncheckedUpdateInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
    inProgressById?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUncheckedUpdateManyWithoutInProgressChaptersNestedInput
  }

  export type InProgressChaptersCreateManyInput = {
    inProgressChapterId: number
    inProgressById: number
  }

  export type InProgressChaptersUpdateManyMutationInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
  }

  export type InProgressChaptersUncheckedUpdateManyInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
    inProgressById?: IntFieldUpdateOperationsInput | number
  }

  export type SavedStoriesCreateInput = {
    savedStoryId: number
    stories?: StoryCreateNestedManyWithoutSavedStoriesInput
    savedBy: UserCreateNestedOneWithoutSavedStoriesInput
  }

  export type SavedStoriesUncheckedCreateInput = {
    savedStoryId: number
    savedById: number
    stories?: StoryUncheckedCreateNestedManyWithoutSavedStoriesInput
  }

  export type SavedStoriesUpdateInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
    stories?: StoryUpdateManyWithoutSavedStoriesNestedInput
    savedBy?: UserUpdateOneRequiredWithoutSavedStoriesNestedInput
  }

  export type SavedStoriesUncheckedUpdateInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
    savedById?: IntFieldUpdateOperationsInput | number
    stories?: StoryUncheckedUpdateManyWithoutSavedStoriesNestedInput
  }

  export type SavedStoriesCreateManyInput = {
    savedStoryId: number
    savedById: number
  }

  export type SavedStoriesUpdateManyMutationInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
  }

  export type SavedStoriesUncheckedUpdateManyInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
    savedById?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    createdStories?: StoryCreateNestedManyWithoutOwnerInput
    completedChapters?: CompletedChaptersCreateNestedOneWithoutCompletedByInput
    inProgressChapters?: InProgressChaptersCreateNestedOneWithoutInProgressByInput
    savedStories?: SavedStoriesCreateNestedOneWithoutSavedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    createdStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    completedChapters?: CompletedChaptersUncheckedCreateNestedOneWithoutCompletedByInput
    inProgressChapters?: InProgressChaptersUncheckedCreateNestedOneWithoutInProgressByInput
    savedStories?: SavedStoriesUncheckedCreateNestedOneWithoutSavedByInput
  }

  export type UserUpdateInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdStories?: StoryUpdateManyWithoutOwnerNestedInput
    completedChapters?: CompletedChaptersUpdateOneWithoutCompletedByNestedInput
    inProgressChapters?: InProgressChaptersUpdateOneWithoutInProgressByNestedInput
    savedStories?: SavedStoriesUpdateOneWithoutSavedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    completedChapters?: CompletedChaptersUncheckedUpdateOneWithoutCompletedByNestedInput
    inProgressChapters?: InProgressChaptersUncheckedUpdateOneWithoutInProgressByNestedInput
    savedStories?: SavedStoriesUncheckedUpdateOneWithoutSavedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ChapterListRelationFilter = {
    every?: ChapterWhereInput
    some?: ChapterWhereInput
    none?: ChapterWhereInput
  }

  export type SavedStoriesListRelationFilter = {
    every?: SavedStoriesWhereInput
    some?: SavedStoriesWhereInput
    none?: SavedStoriesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ChapterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedStoriesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StoryNameUserIdCompoundUniqueInput = {
    name: string
    userId: number
  }

  export type StoryCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type StoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StoryMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type StoryMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    name?: SortOrder
    userId?: SortOrder
  }

  export type StorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StoryRelationFilter = {
    is?: StoryWhereInput
    isNot?: StoryWhereInput
  }

  export type CompletedChaptersListRelationFilter = {
    every?: CompletedChaptersWhereInput
    some?: CompletedChaptersWhereInput
    none?: CompletedChaptersWhereInput
  }

  export type InProgressChaptersListRelationFilter = {
    every?: InProgressChaptersWhereInput
    some?: InProgressChaptersWhereInput
    none?: InProgressChaptersWhereInput
  }

  export type CompletedChaptersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InProgressChaptersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChapterNameStoryIdCompoundUniqueInput = {
    name: string
    storyId: number
  }

  export type ChapterCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    details?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    name?: SortOrder
    passcode?: SortOrder
    order?: SortOrder
    secretText?: SortOrder
    storyId?: SortOrder
  }

  export type ChapterAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    order?: SortOrder
    storyId?: SortOrder
  }

  export type ChapterMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    details?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    name?: SortOrder
    passcode?: SortOrder
    order?: SortOrder
    secretText?: SortOrder
    storyId?: SortOrder
  }

  export type ChapterMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    details?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    name?: SortOrder
    passcode?: SortOrder
    order?: SortOrder
    secretText?: SortOrder
    storyId?: SortOrder
  }

  export type ChapterSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    order?: SortOrder
    storyId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CompletedChaptersCountOrderByAggregateInput = {
    completedChapterId?: SortOrder
    completedById?: SortOrder
  }

  export type CompletedChaptersAvgOrderByAggregateInput = {
    completedChapterId?: SortOrder
    completedById?: SortOrder
  }

  export type CompletedChaptersMaxOrderByAggregateInput = {
    completedChapterId?: SortOrder
    completedById?: SortOrder
  }

  export type CompletedChaptersMinOrderByAggregateInput = {
    completedChapterId?: SortOrder
    completedById?: SortOrder
  }

  export type CompletedChaptersSumOrderByAggregateInput = {
    completedChapterId?: SortOrder
    completedById?: SortOrder
  }

  export type InProgressChaptersCountOrderByAggregateInput = {
    inProgressChapterId?: SortOrder
    inProgressById?: SortOrder
  }

  export type InProgressChaptersAvgOrderByAggregateInput = {
    inProgressChapterId?: SortOrder
    inProgressById?: SortOrder
  }

  export type InProgressChaptersMaxOrderByAggregateInput = {
    inProgressChapterId?: SortOrder
    inProgressById?: SortOrder
  }

  export type InProgressChaptersMinOrderByAggregateInput = {
    inProgressChapterId?: SortOrder
    inProgressById?: SortOrder
  }

  export type InProgressChaptersSumOrderByAggregateInput = {
    inProgressChapterId?: SortOrder
    inProgressById?: SortOrder
  }

  export type StoryListRelationFilter = {
    every?: StoryWhereInput
    some?: StoryWhereInput
    none?: StoryWhereInput
  }

  export type StoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SavedStoriesCountOrderByAggregateInput = {
    savedStoryId?: SortOrder
    savedById?: SortOrder
  }

  export type SavedStoriesAvgOrderByAggregateInput = {
    savedStoryId?: SortOrder
    savedById?: SortOrder
  }

  export type SavedStoriesMaxOrderByAggregateInput = {
    savedStoryId?: SortOrder
    savedById?: SortOrder
  }

  export type SavedStoriesMinOrderByAggregateInput = {
    savedStoryId?: SortOrder
    savedById?: SortOrder
  }

  export type SavedStoriesSumOrderByAggregateInput = {
    savedStoryId?: SortOrder
    savedById?: SortOrder
  }

  export type CompletedChaptersNullableRelationFilter = {
    is?: CompletedChaptersWhereInput | null
    isNot?: CompletedChaptersWhereInput | null
  }

  export type InProgressChaptersNullableRelationFilter = {
    is?: InProgressChaptersWhereInput | null
    isNot?: InProgressChaptersWhereInput | null
  }

  export type SavedStoriesNullableRelationFilter = {
    is?: SavedStoriesWhereInput | null
    isNot?: SavedStoriesWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserCreateNestedOneWithoutCreatedStoriesInput = {
    create?: XOR<UserCreateWithoutCreatedStoriesInput, UserUncheckedCreateWithoutCreatedStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedStoriesInput
    connect?: UserWhereUniqueInput
  }

  export type ChapterCreateNestedManyWithoutStoryInput = {
    create?: XOR<ChapterCreateWithoutStoryInput, ChapterUncheckedCreateWithoutStoryInput> | ChapterCreateWithoutStoryInput[] | ChapterUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutStoryInput | ChapterCreateOrConnectWithoutStoryInput[]
    createMany?: ChapterCreateManyStoryInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type SavedStoriesCreateNestedManyWithoutStoriesInput = {
    create?: XOR<SavedStoriesCreateWithoutStoriesInput, SavedStoriesUncheckedCreateWithoutStoriesInput> | SavedStoriesCreateWithoutStoriesInput[] | SavedStoriesUncheckedCreateWithoutStoriesInput[]
    connectOrCreate?: SavedStoriesCreateOrConnectWithoutStoriesInput | SavedStoriesCreateOrConnectWithoutStoriesInput[]
    connect?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
  }

  export type ChapterUncheckedCreateNestedManyWithoutStoryInput = {
    create?: XOR<ChapterCreateWithoutStoryInput, ChapterUncheckedCreateWithoutStoryInput> | ChapterCreateWithoutStoryInput[] | ChapterUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutStoryInput | ChapterCreateOrConnectWithoutStoryInput[]
    createMany?: ChapterCreateManyStoryInputEnvelope
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type SavedStoriesUncheckedCreateNestedManyWithoutStoriesInput = {
    create?: XOR<SavedStoriesCreateWithoutStoriesInput, SavedStoriesUncheckedCreateWithoutStoriesInput> | SavedStoriesCreateWithoutStoriesInput[] | SavedStoriesUncheckedCreateWithoutStoriesInput[]
    connectOrCreate?: SavedStoriesCreateOrConnectWithoutStoriesInput | SavedStoriesCreateOrConnectWithoutStoriesInput[]
    connect?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdateOneRequiredWithoutCreatedStoriesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedStoriesInput, UserUncheckedCreateWithoutCreatedStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedStoriesInput
    upsert?: UserUpsertWithoutCreatedStoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedStoriesInput, UserUpdateWithoutCreatedStoriesInput>, UserUncheckedUpdateWithoutCreatedStoriesInput>
  }

  export type ChapterUpdateManyWithoutStoryNestedInput = {
    create?: XOR<ChapterCreateWithoutStoryInput, ChapterUncheckedCreateWithoutStoryInput> | ChapterCreateWithoutStoryInput[] | ChapterUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutStoryInput | ChapterCreateOrConnectWithoutStoryInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutStoryInput | ChapterUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: ChapterCreateManyStoryInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutStoryInput | ChapterUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutStoryInput | ChapterUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type SavedStoriesUpdateManyWithoutStoriesNestedInput = {
    create?: XOR<SavedStoriesCreateWithoutStoriesInput, SavedStoriesUncheckedCreateWithoutStoriesInput> | SavedStoriesCreateWithoutStoriesInput[] | SavedStoriesUncheckedCreateWithoutStoriesInput[]
    connectOrCreate?: SavedStoriesCreateOrConnectWithoutStoriesInput | SavedStoriesCreateOrConnectWithoutStoriesInput[]
    upsert?: SavedStoriesUpsertWithWhereUniqueWithoutStoriesInput | SavedStoriesUpsertWithWhereUniqueWithoutStoriesInput[]
    set?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
    disconnect?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
    delete?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
    connect?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
    update?: SavedStoriesUpdateWithWhereUniqueWithoutStoriesInput | SavedStoriesUpdateWithWhereUniqueWithoutStoriesInput[]
    updateMany?: SavedStoriesUpdateManyWithWhereWithoutStoriesInput | SavedStoriesUpdateManyWithWhereWithoutStoriesInput[]
    deleteMany?: SavedStoriesScalarWhereInput | SavedStoriesScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChapterUncheckedUpdateManyWithoutStoryNestedInput = {
    create?: XOR<ChapterCreateWithoutStoryInput, ChapterUncheckedCreateWithoutStoryInput> | ChapterCreateWithoutStoryInput[] | ChapterUncheckedCreateWithoutStoryInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutStoryInput | ChapterCreateOrConnectWithoutStoryInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutStoryInput | ChapterUpsertWithWhereUniqueWithoutStoryInput[]
    createMany?: ChapterCreateManyStoryInputEnvelope
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutStoryInput | ChapterUpdateWithWhereUniqueWithoutStoryInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutStoryInput | ChapterUpdateManyWithWhereWithoutStoryInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type SavedStoriesUncheckedUpdateManyWithoutStoriesNestedInput = {
    create?: XOR<SavedStoriesCreateWithoutStoriesInput, SavedStoriesUncheckedCreateWithoutStoriesInput> | SavedStoriesCreateWithoutStoriesInput[] | SavedStoriesUncheckedCreateWithoutStoriesInput[]
    connectOrCreate?: SavedStoriesCreateOrConnectWithoutStoriesInput | SavedStoriesCreateOrConnectWithoutStoriesInput[]
    upsert?: SavedStoriesUpsertWithWhereUniqueWithoutStoriesInput | SavedStoriesUpsertWithWhereUniqueWithoutStoriesInput[]
    set?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
    disconnect?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
    delete?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
    connect?: SavedStoriesWhereUniqueInput | SavedStoriesWhereUniqueInput[]
    update?: SavedStoriesUpdateWithWhereUniqueWithoutStoriesInput | SavedStoriesUpdateWithWhereUniqueWithoutStoriesInput[]
    updateMany?: SavedStoriesUpdateManyWithWhereWithoutStoriesInput | SavedStoriesUpdateManyWithWhereWithoutStoriesInput[]
    deleteMany?: SavedStoriesScalarWhereInput | SavedStoriesScalarWhereInput[]
  }

  export type StoryCreateNestedOneWithoutChaptersInput = {
    create?: XOR<StoryCreateWithoutChaptersInput, StoryUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: StoryCreateOrConnectWithoutChaptersInput
    connect?: StoryWhereUniqueInput
  }

  export type CompletedChaptersCreateNestedManyWithoutChaptersInput = {
    create?: XOR<CompletedChaptersCreateWithoutChaptersInput, CompletedChaptersUncheckedCreateWithoutChaptersInput> | CompletedChaptersCreateWithoutChaptersInput[] | CompletedChaptersUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: CompletedChaptersCreateOrConnectWithoutChaptersInput | CompletedChaptersCreateOrConnectWithoutChaptersInput[]
    connect?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
  }

  export type InProgressChaptersCreateNestedManyWithoutChaptersInput = {
    create?: XOR<InProgressChaptersCreateWithoutChaptersInput, InProgressChaptersUncheckedCreateWithoutChaptersInput> | InProgressChaptersCreateWithoutChaptersInput[] | InProgressChaptersUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: InProgressChaptersCreateOrConnectWithoutChaptersInput | InProgressChaptersCreateOrConnectWithoutChaptersInput[]
    connect?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
  }

  export type CompletedChaptersUncheckedCreateNestedManyWithoutChaptersInput = {
    create?: XOR<CompletedChaptersCreateWithoutChaptersInput, CompletedChaptersUncheckedCreateWithoutChaptersInput> | CompletedChaptersCreateWithoutChaptersInput[] | CompletedChaptersUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: CompletedChaptersCreateOrConnectWithoutChaptersInput | CompletedChaptersCreateOrConnectWithoutChaptersInput[]
    connect?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
  }

  export type InProgressChaptersUncheckedCreateNestedManyWithoutChaptersInput = {
    create?: XOR<InProgressChaptersCreateWithoutChaptersInput, InProgressChaptersUncheckedCreateWithoutChaptersInput> | InProgressChaptersCreateWithoutChaptersInput[] | InProgressChaptersUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: InProgressChaptersCreateOrConnectWithoutChaptersInput | InProgressChaptersCreateOrConnectWithoutChaptersInput[]
    connect?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StoryUpdateOneRequiredWithoutChaptersNestedInput = {
    create?: XOR<StoryCreateWithoutChaptersInput, StoryUncheckedCreateWithoutChaptersInput>
    connectOrCreate?: StoryCreateOrConnectWithoutChaptersInput
    upsert?: StoryUpsertWithoutChaptersInput
    connect?: StoryWhereUniqueInput
    update?: XOR<XOR<StoryUpdateToOneWithWhereWithoutChaptersInput, StoryUpdateWithoutChaptersInput>, StoryUncheckedUpdateWithoutChaptersInput>
  }

  export type CompletedChaptersUpdateManyWithoutChaptersNestedInput = {
    create?: XOR<CompletedChaptersCreateWithoutChaptersInput, CompletedChaptersUncheckedCreateWithoutChaptersInput> | CompletedChaptersCreateWithoutChaptersInput[] | CompletedChaptersUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: CompletedChaptersCreateOrConnectWithoutChaptersInput | CompletedChaptersCreateOrConnectWithoutChaptersInput[]
    upsert?: CompletedChaptersUpsertWithWhereUniqueWithoutChaptersInput | CompletedChaptersUpsertWithWhereUniqueWithoutChaptersInput[]
    set?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
    disconnect?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
    delete?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
    connect?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
    update?: CompletedChaptersUpdateWithWhereUniqueWithoutChaptersInput | CompletedChaptersUpdateWithWhereUniqueWithoutChaptersInput[]
    updateMany?: CompletedChaptersUpdateManyWithWhereWithoutChaptersInput | CompletedChaptersUpdateManyWithWhereWithoutChaptersInput[]
    deleteMany?: CompletedChaptersScalarWhereInput | CompletedChaptersScalarWhereInput[]
  }

  export type InProgressChaptersUpdateManyWithoutChaptersNestedInput = {
    create?: XOR<InProgressChaptersCreateWithoutChaptersInput, InProgressChaptersUncheckedCreateWithoutChaptersInput> | InProgressChaptersCreateWithoutChaptersInput[] | InProgressChaptersUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: InProgressChaptersCreateOrConnectWithoutChaptersInput | InProgressChaptersCreateOrConnectWithoutChaptersInput[]
    upsert?: InProgressChaptersUpsertWithWhereUniqueWithoutChaptersInput | InProgressChaptersUpsertWithWhereUniqueWithoutChaptersInput[]
    set?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
    disconnect?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
    delete?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
    connect?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
    update?: InProgressChaptersUpdateWithWhereUniqueWithoutChaptersInput | InProgressChaptersUpdateWithWhereUniqueWithoutChaptersInput[]
    updateMany?: InProgressChaptersUpdateManyWithWhereWithoutChaptersInput | InProgressChaptersUpdateManyWithWhereWithoutChaptersInput[]
    deleteMany?: InProgressChaptersScalarWhereInput | InProgressChaptersScalarWhereInput[]
  }

  export type CompletedChaptersUncheckedUpdateManyWithoutChaptersNestedInput = {
    create?: XOR<CompletedChaptersCreateWithoutChaptersInput, CompletedChaptersUncheckedCreateWithoutChaptersInput> | CompletedChaptersCreateWithoutChaptersInput[] | CompletedChaptersUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: CompletedChaptersCreateOrConnectWithoutChaptersInput | CompletedChaptersCreateOrConnectWithoutChaptersInput[]
    upsert?: CompletedChaptersUpsertWithWhereUniqueWithoutChaptersInput | CompletedChaptersUpsertWithWhereUniqueWithoutChaptersInput[]
    set?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
    disconnect?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
    delete?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
    connect?: CompletedChaptersWhereUniqueInput | CompletedChaptersWhereUniqueInput[]
    update?: CompletedChaptersUpdateWithWhereUniqueWithoutChaptersInput | CompletedChaptersUpdateWithWhereUniqueWithoutChaptersInput[]
    updateMany?: CompletedChaptersUpdateManyWithWhereWithoutChaptersInput | CompletedChaptersUpdateManyWithWhereWithoutChaptersInput[]
    deleteMany?: CompletedChaptersScalarWhereInput | CompletedChaptersScalarWhereInput[]
  }

  export type InProgressChaptersUncheckedUpdateManyWithoutChaptersNestedInput = {
    create?: XOR<InProgressChaptersCreateWithoutChaptersInput, InProgressChaptersUncheckedCreateWithoutChaptersInput> | InProgressChaptersCreateWithoutChaptersInput[] | InProgressChaptersUncheckedCreateWithoutChaptersInput[]
    connectOrCreate?: InProgressChaptersCreateOrConnectWithoutChaptersInput | InProgressChaptersCreateOrConnectWithoutChaptersInput[]
    upsert?: InProgressChaptersUpsertWithWhereUniqueWithoutChaptersInput | InProgressChaptersUpsertWithWhereUniqueWithoutChaptersInput[]
    set?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
    disconnect?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
    delete?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
    connect?: InProgressChaptersWhereUniqueInput | InProgressChaptersWhereUniqueInput[]
    update?: InProgressChaptersUpdateWithWhereUniqueWithoutChaptersInput | InProgressChaptersUpdateWithWhereUniqueWithoutChaptersInput[]
    updateMany?: InProgressChaptersUpdateManyWithWhereWithoutChaptersInput | InProgressChaptersUpdateManyWithWhereWithoutChaptersInput[]
    deleteMany?: InProgressChaptersScalarWhereInput | InProgressChaptersScalarWhereInput[]
  }

  export type ChapterCreateNestedManyWithoutCompletedChaptersInput = {
    create?: XOR<ChapterCreateWithoutCompletedChaptersInput, ChapterUncheckedCreateWithoutCompletedChaptersInput> | ChapterCreateWithoutCompletedChaptersInput[] | ChapterUncheckedCreateWithoutCompletedChaptersInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutCompletedChaptersInput | ChapterCreateOrConnectWithoutCompletedChaptersInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCompletedChaptersInput = {
    create?: XOR<UserCreateWithoutCompletedChaptersInput, UserUncheckedCreateWithoutCompletedChaptersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompletedChaptersInput
    connect?: UserWhereUniqueInput
  }

  export type ChapterUncheckedCreateNestedManyWithoutCompletedChaptersInput = {
    create?: XOR<ChapterCreateWithoutCompletedChaptersInput, ChapterUncheckedCreateWithoutCompletedChaptersInput> | ChapterCreateWithoutCompletedChaptersInput[] | ChapterUncheckedCreateWithoutCompletedChaptersInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutCompletedChaptersInput | ChapterCreateOrConnectWithoutCompletedChaptersInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type ChapterUpdateManyWithoutCompletedChaptersNestedInput = {
    create?: XOR<ChapterCreateWithoutCompletedChaptersInput, ChapterUncheckedCreateWithoutCompletedChaptersInput> | ChapterCreateWithoutCompletedChaptersInput[] | ChapterUncheckedCreateWithoutCompletedChaptersInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutCompletedChaptersInput | ChapterCreateOrConnectWithoutCompletedChaptersInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutCompletedChaptersInput | ChapterUpsertWithWhereUniqueWithoutCompletedChaptersInput[]
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutCompletedChaptersInput | ChapterUpdateWithWhereUniqueWithoutCompletedChaptersInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutCompletedChaptersInput | ChapterUpdateManyWithWhereWithoutCompletedChaptersInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCompletedChaptersNestedInput = {
    create?: XOR<UserCreateWithoutCompletedChaptersInput, UserUncheckedCreateWithoutCompletedChaptersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCompletedChaptersInput
    upsert?: UserUpsertWithoutCompletedChaptersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCompletedChaptersInput, UserUpdateWithoutCompletedChaptersInput>, UserUncheckedUpdateWithoutCompletedChaptersInput>
  }

  export type ChapterUncheckedUpdateManyWithoutCompletedChaptersNestedInput = {
    create?: XOR<ChapterCreateWithoutCompletedChaptersInput, ChapterUncheckedCreateWithoutCompletedChaptersInput> | ChapterCreateWithoutCompletedChaptersInput[] | ChapterUncheckedCreateWithoutCompletedChaptersInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutCompletedChaptersInput | ChapterCreateOrConnectWithoutCompletedChaptersInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutCompletedChaptersInput | ChapterUpsertWithWhereUniqueWithoutCompletedChaptersInput[]
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutCompletedChaptersInput | ChapterUpdateWithWhereUniqueWithoutCompletedChaptersInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutCompletedChaptersInput | ChapterUpdateManyWithWhereWithoutCompletedChaptersInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type ChapterCreateNestedManyWithoutInProgressChaptersInput = {
    create?: XOR<ChapterCreateWithoutInProgressChaptersInput, ChapterUncheckedCreateWithoutInProgressChaptersInput> | ChapterCreateWithoutInProgressChaptersInput[] | ChapterUncheckedCreateWithoutInProgressChaptersInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutInProgressChaptersInput | ChapterCreateOrConnectWithoutInProgressChaptersInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutInProgressChaptersInput = {
    create?: XOR<UserCreateWithoutInProgressChaptersInput, UserUncheckedCreateWithoutInProgressChaptersInput>
    connectOrCreate?: UserCreateOrConnectWithoutInProgressChaptersInput
    connect?: UserWhereUniqueInput
  }

  export type ChapterUncheckedCreateNestedManyWithoutInProgressChaptersInput = {
    create?: XOR<ChapterCreateWithoutInProgressChaptersInput, ChapterUncheckedCreateWithoutInProgressChaptersInput> | ChapterCreateWithoutInProgressChaptersInput[] | ChapterUncheckedCreateWithoutInProgressChaptersInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutInProgressChaptersInput | ChapterCreateOrConnectWithoutInProgressChaptersInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
  }

  export type ChapterUpdateManyWithoutInProgressChaptersNestedInput = {
    create?: XOR<ChapterCreateWithoutInProgressChaptersInput, ChapterUncheckedCreateWithoutInProgressChaptersInput> | ChapterCreateWithoutInProgressChaptersInput[] | ChapterUncheckedCreateWithoutInProgressChaptersInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutInProgressChaptersInput | ChapterCreateOrConnectWithoutInProgressChaptersInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutInProgressChaptersInput | ChapterUpsertWithWhereUniqueWithoutInProgressChaptersInput[]
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutInProgressChaptersInput | ChapterUpdateWithWhereUniqueWithoutInProgressChaptersInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutInProgressChaptersInput | ChapterUpdateManyWithWhereWithoutInProgressChaptersInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutInProgressChaptersNestedInput = {
    create?: XOR<UserCreateWithoutInProgressChaptersInput, UserUncheckedCreateWithoutInProgressChaptersInput>
    connectOrCreate?: UserCreateOrConnectWithoutInProgressChaptersInput
    upsert?: UserUpsertWithoutInProgressChaptersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInProgressChaptersInput, UserUpdateWithoutInProgressChaptersInput>, UserUncheckedUpdateWithoutInProgressChaptersInput>
  }

  export type ChapterUncheckedUpdateManyWithoutInProgressChaptersNestedInput = {
    create?: XOR<ChapterCreateWithoutInProgressChaptersInput, ChapterUncheckedCreateWithoutInProgressChaptersInput> | ChapterCreateWithoutInProgressChaptersInput[] | ChapterUncheckedCreateWithoutInProgressChaptersInput[]
    connectOrCreate?: ChapterCreateOrConnectWithoutInProgressChaptersInput | ChapterCreateOrConnectWithoutInProgressChaptersInput[]
    upsert?: ChapterUpsertWithWhereUniqueWithoutInProgressChaptersInput | ChapterUpsertWithWhereUniqueWithoutInProgressChaptersInput[]
    set?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    disconnect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    delete?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    connect?: ChapterWhereUniqueInput | ChapterWhereUniqueInput[]
    update?: ChapterUpdateWithWhereUniqueWithoutInProgressChaptersInput | ChapterUpdateWithWhereUniqueWithoutInProgressChaptersInput[]
    updateMany?: ChapterUpdateManyWithWhereWithoutInProgressChaptersInput | ChapterUpdateManyWithWhereWithoutInProgressChaptersInput[]
    deleteMany?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
  }

  export type StoryCreateNestedManyWithoutSavedStoriesInput = {
    create?: XOR<StoryCreateWithoutSavedStoriesInput, StoryUncheckedCreateWithoutSavedStoriesInput> | StoryCreateWithoutSavedStoriesInput[] | StoryUncheckedCreateWithoutSavedStoriesInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutSavedStoriesInput | StoryCreateOrConnectWithoutSavedStoriesInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutSavedStoriesInput = {
    create?: XOR<UserCreateWithoutSavedStoriesInput, UserUncheckedCreateWithoutSavedStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedStoriesInput
    connect?: UserWhereUniqueInput
  }

  export type StoryUncheckedCreateNestedManyWithoutSavedStoriesInput = {
    create?: XOR<StoryCreateWithoutSavedStoriesInput, StoryUncheckedCreateWithoutSavedStoriesInput> | StoryCreateWithoutSavedStoriesInput[] | StoryUncheckedCreateWithoutSavedStoriesInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutSavedStoriesInput | StoryCreateOrConnectWithoutSavedStoriesInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type StoryUpdateManyWithoutSavedStoriesNestedInput = {
    create?: XOR<StoryCreateWithoutSavedStoriesInput, StoryUncheckedCreateWithoutSavedStoriesInput> | StoryCreateWithoutSavedStoriesInput[] | StoryUncheckedCreateWithoutSavedStoriesInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutSavedStoriesInput | StoryCreateOrConnectWithoutSavedStoriesInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutSavedStoriesInput | StoryUpsertWithWhereUniqueWithoutSavedStoriesInput[]
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutSavedStoriesInput | StoryUpdateWithWhereUniqueWithoutSavedStoriesInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutSavedStoriesInput | StoryUpdateManyWithWhereWithoutSavedStoriesInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutSavedStoriesNestedInput = {
    create?: XOR<UserCreateWithoutSavedStoriesInput, UserUncheckedCreateWithoutSavedStoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSavedStoriesInput
    upsert?: UserUpsertWithoutSavedStoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSavedStoriesInput, UserUpdateWithoutSavedStoriesInput>, UserUncheckedUpdateWithoutSavedStoriesInput>
  }

  export type StoryUncheckedUpdateManyWithoutSavedStoriesNestedInput = {
    create?: XOR<StoryCreateWithoutSavedStoriesInput, StoryUncheckedCreateWithoutSavedStoriesInput> | StoryCreateWithoutSavedStoriesInput[] | StoryUncheckedCreateWithoutSavedStoriesInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutSavedStoriesInput | StoryCreateOrConnectWithoutSavedStoriesInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutSavedStoriesInput | StoryUpsertWithWhereUniqueWithoutSavedStoriesInput[]
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutSavedStoriesInput | StoryUpdateWithWhereUniqueWithoutSavedStoriesInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutSavedStoriesInput | StoryUpdateManyWithWhereWithoutSavedStoriesInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type StoryCreateNestedManyWithoutOwnerInput = {
    create?: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput> | StoryCreateWithoutOwnerInput[] | StoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutOwnerInput | StoryCreateOrConnectWithoutOwnerInput[]
    createMany?: StoryCreateManyOwnerInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type CompletedChaptersCreateNestedOneWithoutCompletedByInput = {
    create?: XOR<CompletedChaptersCreateWithoutCompletedByInput, CompletedChaptersUncheckedCreateWithoutCompletedByInput>
    connectOrCreate?: CompletedChaptersCreateOrConnectWithoutCompletedByInput
    connect?: CompletedChaptersWhereUniqueInput
  }

  export type InProgressChaptersCreateNestedOneWithoutInProgressByInput = {
    create?: XOR<InProgressChaptersCreateWithoutInProgressByInput, InProgressChaptersUncheckedCreateWithoutInProgressByInput>
    connectOrCreate?: InProgressChaptersCreateOrConnectWithoutInProgressByInput
    connect?: InProgressChaptersWhereUniqueInput
  }

  export type SavedStoriesCreateNestedOneWithoutSavedByInput = {
    create?: XOR<SavedStoriesCreateWithoutSavedByInput, SavedStoriesUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: SavedStoriesCreateOrConnectWithoutSavedByInput
    connect?: SavedStoriesWhereUniqueInput
  }

  export type StoryUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput> | StoryCreateWithoutOwnerInput[] | StoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutOwnerInput | StoryCreateOrConnectWithoutOwnerInput[]
    createMany?: StoryCreateManyOwnerInputEnvelope
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
  }

  export type CompletedChaptersUncheckedCreateNestedOneWithoutCompletedByInput = {
    create?: XOR<CompletedChaptersCreateWithoutCompletedByInput, CompletedChaptersUncheckedCreateWithoutCompletedByInput>
    connectOrCreate?: CompletedChaptersCreateOrConnectWithoutCompletedByInput
    connect?: CompletedChaptersWhereUniqueInput
  }

  export type InProgressChaptersUncheckedCreateNestedOneWithoutInProgressByInput = {
    create?: XOR<InProgressChaptersCreateWithoutInProgressByInput, InProgressChaptersUncheckedCreateWithoutInProgressByInput>
    connectOrCreate?: InProgressChaptersCreateOrConnectWithoutInProgressByInput
    connect?: InProgressChaptersWhereUniqueInput
  }

  export type SavedStoriesUncheckedCreateNestedOneWithoutSavedByInput = {
    create?: XOR<SavedStoriesCreateWithoutSavedByInput, SavedStoriesUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: SavedStoriesCreateOrConnectWithoutSavedByInput
    connect?: SavedStoriesWhereUniqueInput
  }

  export type StoryUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput> | StoryCreateWithoutOwnerInput[] | StoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutOwnerInput | StoryCreateOrConnectWithoutOwnerInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutOwnerInput | StoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: StoryCreateManyOwnerInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutOwnerInput | StoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutOwnerInput | StoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type CompletedChaptersUpdateOneWithoutCompletedByNestedInput = {
    create?: XOR<CompletedChaptersCreateWithoutCompletedByInput, CompletedChaptersUncheckedCreateWithoutCompletedByInput>
    connectOrCreate?: CompletedChaptersCreateOrConnectWithoutCompletedByInput
    upsert?: CompletedChaptersUpsertWithoutCompletedByInput
    disconnect?: CompletedChaptersWhereInput | boolean
    delete?: CompletedChaptersWhereInput | boolean
    connect?: CompletedChaptersWhereUniqueInput
    update?: XOR<XOR<CompletedChaptersUpdateToOneWithWhereWithoutCompletedByInput, CompletedChaptersUpdateWithoutCompletedByInput>, CompletedChaptersUncheckedUpdateWithoutCompletedByInput>
  }

  export type InProgressChaptersUpdateOneWithoutInProgressByNestedInput = {
    create?: XOR<InProgressChaptersCreateWithoutInProgressByInput, InProgressChaptersUncheckedCreateWithoutInProgressByInput>
    connectOrCreate?: InProgressChaptersCreateOrConnectWithoutInProgressByInput
    upsert?: InProgressChaptersUpsertWithoutInProgressByInput
    disconnect?: InProgressChaptersWhereInput | boolean
    delete?: InProgressChaptersWhereInput | boolean
    connect?: InProgressChaptersWhereUniqueInput
    update?: XOR<XOR<InProgressChaptersUpdateToOneWithWhereWithoutInProgressByInput, InProgressChaptersUpdateWithoutInProgressByInput>, InProgressChaptersUncheckedUpdateWithoutInProgressByInput>
  }

  export type SavedStoriesUpdateOneWithoutSavedByNestedInput = {
    create?: XOR<SavedStoriesCreateWithoutSavedByInput, SavedStoriesUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: SavedStoriesCreateOrConnectWithoutSavedByInput
    upsert?: SavedStoriesUpsertWithoutSavedByInput
    disconnect?: SavedStoriesWhereInput | boolean
    delete?: SavedStoriesWhereInput | boolean
    connect?: SavedStoriesWhereUniqueInput
    update?: XOR<XOR<SavedStoriesUpdateToOneWithWhereWithoutSavedByInput, SavedStoriesUpdateWithoutSavedByInput>, SavedStoriesUncheckedUpdateWithoutSavedByInput>
  }

  export type StoryUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput> | StoryCreateWithoutOwnerInput[] | StoryUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: StoryCreateOrConnectWithoutOwnerInput | StoryCreateOrConnectWithoutOwnerInput[]
    upsert?: StoryUpsertWithWhereUniqueWithoutOwnerInput | StoryUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: StoryCreateManyOwnerInputEnvelope
    set?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    disconnect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    delete?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    connect?: StoryWhereUniqueInput | StoryWhereUniqueInput[]
    update?: StoryUpdateWithWhereUniqueWithoutOwnerInput | StoryUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: StoryUpdateManyWithWhereWithoutOwnerInput | StoryUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: StoryScalarWhereInput | StoryScalarWhereInput[]
  }

  export type CompletedChaptersUncheckedUpdateOneWithoutCompletedByNestedInput = {
    create?: XOR<CompletedChaptersCreateWithoutCompletedByInput, CompletedChaptersUncheckedCreateWithoutCompletedByInput>
    connectOrCreate?: CompletedChaptersCreateOrConnectWithoutCompletedByInput
    upsert?: CompletedChaptersUpsertWithoutCompletedByInput
    disconnect?: CompletedChaptersWhereInput | boolean
    delete?: CompletedChaptersWhereInput | boolean
    connect?: CompletedChaptersWhereUniqueInput
    update?: XOR<XOR<CompletedChaptersUpdateToOneWithWhereWithoutCompletedByInput, CompletedChaptersUpdateWithoutCompletedByInput>, CompletedChaptersUncheckedUpdateWithoutCompletedByInput>
  }

  export type InProgressChaptersUncheckedUpdateOneWithoutInProgressByNestedInput = {
    create?: XOR<InProgressChaptersCreateWithoutInProgressByInput, InProgressChaptersUncheckedCreateWithoutInProgressByInput>
    connectOrCreate?: InProgressChaptersCreateOrConnectWithoutInProgressByInput
    upsert?: InProgressChaptersUpsertWithoutInProgressByInput
    disconnect?: InProgressChaptersWhereInput | boolean
    delete?: InProgressChaptersWhereInput | boolean
    connect?: InProgressChaptersWhereUniqueInput
    update?: XOR<XOR<InProgressChaptersUpdateToOneWithWhereWithoutInProgressByInput, InProgressChaptersUpdateWithoutInProgressByInput>, InProgressChaptersUncheckedUpdateWithoutInProgressByInput>
  }

  export type SavedStoriesUncheckedUpdateOneWithoutSavedByNestedInput = {
    create?: XOR<SavedStoriesCreateWithoutSavedByInput, SavedStoriesUncheckedCreateWithoutSavedByInput>
    connectOrCreate?: SavedStoriesCreateOrConnectWithoutSavedByInput
    upsert?: SavedStoriesUpsertWithoutSavedByInput
    disconnect?: SavedStoriesWhereInput | boolean
    delete?: SavedStoriesWhereInput | boolean
    connect?: SavedStoriesWhereUniqueInput
    update?: XOR<XOR<SavedStoriesUpdateToOneWithWhereWithoutSavedByInput, SavedStoriesUpdateWithoutSavedByInput>, SavedStoriesUncheckedUpdateWithoutSavedByInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserCreateWithoutCreatedStoriesInput = {
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    completedChapters?: CompletedChaptersCreateNestedOneWithoutCompletedByInput
    inProgressChapters?: InProgressChaptersCreateNestedOneWithoutInProgressByInput
    savedStories?: SavedStoriesCreateNestedOneWithoutSavedByInput
  }

  export type UserUncheckedCreateWithoutCreatedStoriesInput = {
    id?: number
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    completedChapters?: CompletedChaptersUncheckedCreateNestedOneWithoutCompletedByInput
    inProgressChapters?: InProgressChaptersUncheckedCreateNestedOneWithoutInProgressByInput
    savedStories?: SavedStoriesUncheckedCreateNestedOneWithoutSavedByInput
  }

  export type UserCreateOrConnectWithoutCreatedStoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedStoriesInput, UserUncheckedCreateWithoutCreatedStoriesInput>
  }

  export type ChapterCreateWithoutStoryInput = {
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    completedChapters?: CompletedChaptersCreateNestedManyWithoutChaptersInput
    inProgressChapters?: InProgressChaptersCreateNestedManyWithoutChaptersInput
  }

  export type ChapterUncheckedCreateWithoutStoryInput = {
    id?: number
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    completedChapters?: CompletedChaptersUncheckedCreateNestedManyWithoutChaptersInput
    inProgressChapters?: InProgressChaptersUncheckedCreateNestedManyWithoutChaptersInput
  }

  export type ChapterCreateOrConnectWithoutStoryInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutStoryInput, ChapterUncheckedCreateWithoutStoryInput>
  }

  export type ChapterCreateManyStoryInputEnvelope = {
    data: ChapterCreateManyStoryInput | ChapterCreateManyStoryInput[]
    skipDuplicates?: boolean
  }

  export type SavedStoriesCreateWithoutStoriesInput = {
    savedStoryId: number
    savedBy: UserCreateNestedOneWithoutSavedStoriesInput
  }

  export type SavedStoriesUncheckedCreateWithoutStoriesInput = {
    savedStoryId: number
    savedById: number
  }

  export type SavedStoriesCreateOrConnectWithoutStoriesInput = {
    where: SavedStoriesWhereUniqueInput
    create: XOR<SavedStoriesCreateWithoutStoriesInput, SavedStoriesUncheckedCreateWithoutStoriesInput>
  }

  export type UserUpsertWithoutCreatedStoriesInput = {
    update: XOR<UserUpdateWithoutCreatedStoriesInput, UserUncheckedUpdateWithoutCreatedStoriesInput>
    create: XOR<UserCreateWithoutCreatedStoriesInput, UserUncheckedCreateWithoutCreatedStoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedStoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedStoriesInput, UserUncheckedUpdateWithoutCreatedStoriesInput>
  }

  export type UserUpdateWithoutCreatedStoriesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    completedChapters?: CompletedChaptersUpdateOneWithoutCompletedByNestedInput
    inProgressChapters?: InProgressChaptersUpdateOneWithoutInProgressByNestedInput
    savedStories?: SavedStoriesUpdateOneWithoutSavedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    completedChapters?: CompletedChaptersUncheckedUpdateOneWithoutCompletedByNestedInput
    inProgressChapters?: InProgressChaptersUncheckedUpdateOneWithoutInProgressByNestedInput
    savedStories?: SavedStoriesUncheckedUpdateOneWithoutSavedByNestedInput
  }

  export type ChapterUpsertWithWhereUniqueWithoutStoryInput = {
    where: ChapterWhereUniqueInput
    update: XOR<ChapterUpdateWithoutStoryInput, ChapterUncheckedUpdateWithoutStoryInput>
    create: XOR<ChapterCreateWithoutStoryInput, ChapterUncheckedCreateWithoutStoryInput>
  }

  export type ChapterUpdateWithWhereUniqueWithoutStoryInput = {
    where: ChapterWhereUniqueInput
    data: XOR<ChapterUpdateWithoutStoryInput, ChapterUncheckedUpdateWithoutStoryInput>
  }

  export type ChapterUpdateManyWithWhereWithoutStoryInput = {
    where: ChapterScalarWhereInput
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyWithoutStoryInput>
  }

  export type ChapterScalarWhereInput = {
    AND?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    OR?: ChapterScalarWhereInput[]
    NOT?: ChapterScalarWhereInput | ChapterScalarWhereInput[]
    id?: IntFilter<"Chapter"> | number
    description?: StringFilter<"Chapter"> | string
    details?: StringFilter<"Chapter"> | string
    latitude?: FloatFilter<"Chapter"> | number
    longitude?: FloatFilter<"Chapter"> | number
    name?: StringFilter<"Chapter"> | string
    passcode?: StringNullableFilter<"Chapter"> | string | null
    order?: IntFilter<"Chapter"> | number
    secretText?: StringNullableFilter<"Chapter"> | string | null
    storyId?: IntFilter<"Chapter"> | number
  }

  export type SavedStoriesUpsertWithWhereUniqueWithoutStoriesInput = {
    where: SavedStoriesWhereUniqueInput
    update: XOR<SavedStoriesUpdateWithoutStoriesInput, SavedStoriesUncheckedUpdateWithoutStoriesInput>
    create: XOR<SavedStoriesCreateWithoutStoriesInput, SavedStoriesUncheckedCreateWithoutStoriesInput>
  }

  export type SavedStoriesUpdateWithWhereUniqueWithoutStoriesInput = {
    where: SavedStoriesWhereUniqueInput
    data: XOR<SavedStoriesUpdateWithoutStoriesInput, SavedStoriesUncheckedUpdateWithoutStoriesInput>
  }

  export type SavedStoriesUpdateManyWithWhereWithoutStoriesInput = {
    where: SavedStoriesScalarWhereInput
    data: XOR<SavedStoriesUpdateManyMutationInput, SavedStoriesUncheckedUpdateManyWithoutStoriesInput>
  }

  export type SavedStoriesScalarWhereInput = {
    AND?: SavedStoriesScalarWhereInput | SavedStoriesScalarWhereInput[]
    OR?: SavedStoriesScalarWhereInput[]
    NOT?: SavedStoriesScalarWhereInput | SavedStoriesScalarWhereInput[]
    savedStoryId?: IntFilter<"SavedStories"> | number
    savedById?: IntFilter<"SavedStories"> | number
  }

  export type StoryCreateWithoutChaptersInput = {
    description?: string | null
    name: string
    owner: UserCreateNestedOneWithoutCreatedStoriesInput
    savedStories?: SavedStoriesCreateNestedManyWithoutStoriesInput
  }

  export type StoryUncheckedCreateWithoutChaptersInput = {
    id?: number
    description?: string | null
    name: string
    userId: number
    savedStories?: SavedStoriesUncheckedCreateNestedManyWithoutStoriesInput
  }

  export type StoryCreateOrConnectWithoutChaptersInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutChaptersInput, StoryUncheckedCreateWithoutChaptersInput>
  }

  export type CompletedChaptersCreateWithoutChaptersInput = {
    completedChapterId: number
    completedBy: UserCreateNestedOneWithoutCompletedChaptersInput
  }

  export type CompletedChaptersUncheckedCreateWithoutChaptersInput = {
    completedChapterId: number
    completedById: number
  }

  export type CompletedChaptersCreateOrConnectWithoutChaptersInput = {
    where: CompletedChaptersWhereUniqueInput
    create: XOR<CompletedChaptersCreateWithoutChaptersInput, CompletedChaptersUncheckedCreateWithoutChaptersInput>
  }

  export type InProgressChaptersCreateWithoutChaptersInput = {
    inProgressChapterId: number
    inProgressBy: UserCreateNestedOneWithoutInProgressChaptersInput
  }

  export type InProgressChaptersUncheckedCreateWithoutChaptersInput = {
    inProgressChapterId: number
    inProgressById: number
  }

  export type InProgressChaptersCreateOrConnectWithoutChaptersInput = {
    where: InProgressChaptersWhereUniqueInput
    create: XOR<InProgressChaptersCreateWithoutChaptersInput, InProgressChaptersUncheckedCreateWithoutChaptersInput>
  }

  export type StoryUpsertWithoutChaptersInput = {
    update: XOR<StoryUpdateWithoutChaptersInput, StoryUncheckedUpdateWithoutChaptersInput>
    create: XOR<StoryCreateWithoutChaptersInput, StoryUncheckedCreateWithoutChaptersInput>
    where?: StoryWhereInput
  }

  export type StoryUpdateToOneWithWhereWithoutChaptersInput = {
    where?: StoryWhereInput
    data: XOR<StoryUpdateWithoutChaptersInput, StoryUncheckedUpdateWithoutChaptersInput>
  }

  export type StoryUpdateWithoutChaptersInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutCreatedStoriesNestedInput
    savedStories?: SavedStoriesUpdateManyWithoutStoriesNestedInput
  }

  export type StoryUncheckedUpdateWithoutChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    savedStories?: SavedStoriesUncheckedUpdateManyWithoutStoriesNestedInput
  }

  export type CompletedChaptersUpsertWithWhereUniqueWithoutChaptersInput = {
    where: CompletedChaptersWhereUniqueInput
    update: XOR<CompletedChaptersUpdateWithoutChaptersInput, CompletedChaptersUncheckedUpdateWithoutChaptersInput>
    create: XOR<CompletedChaptersCreateWithoutChaptersInput, CompletedChaptersUncheckedCreateWithoutChaptersInput>
  }

  export type CompletedChaptersUpdateWithWhereUniqueWithoutChaptersInput = {
    where: CompletedChaptersWhereUniqueInput
    data: XOR<CompletedChaptersUpdateWithoutChaptersInput, CompletedChaptersUncheckedUpdateWithoutChaptersInput>
  }

  export type CompletedChaptersUpdateManyWithWhereWithoutChaptersInput = {
    where: CompletedChaptersScalarWhereInput
    data: XOR<CompletedChaptersUpdateManyMutationInput, CompletedChaptersUncheckedUpdateManyWithoutChaptersInput>
  }

  export type CompletedChaptersScalarWhereInput = {
    AND?: CompletedChaptersScalarWhereInput | CompletedChaptersScalarWhereInput[]
    OR?: CompletedChaptersScalarWhereInput[]
    NOT?: CompletedChaptersScalarWhereInput | CompletedChaptersScalarWhereInput[]
    completedChapterId?: IntFilter<"CompletedChapters"> | number
    completedById?: IntFilter<"CompletedChapters"> | number
  }

  export type InProgressChaptersUpsertWithWhereUniqueWithoutChaptersInput = {
    where: InProgressChaptersWhereUniqueInput
    update: XOR<InProgressChaptersUpdateWithoutChaptersInput, InProgressChaptersUncheckedUpdateWithoutChaptersInput>
    create: XOR<InProgressChaptersCreateWithoutChaptersInput, InProgressChaptersUncheckedCreateWithoutChaptersInput>
  }

  export type InProgressChaptersUpdateWithWhereUniqueWithoutChaptersInput = {
    where: InProgressChaptersWhereUniqueInput
    data: XOR<InProgressChaptersUpdateWithoutChaptersInput, InProgressChaptersUncheckedUpdateWithoutChaptersInput>
  }

  export type InProgressChaptersUpdateManyWithWhereWithoutChaptersInput = {
    where: InProgressChaptersScalarWhereInput
    data: XOR<InProgressChaptersUpdateManyMutationInput, InProgressChaptersUncheckedUpdateManyWithoutChaptersInput>
  }

  export type InProgressChaptersScalarWhereInput = {
    AND?: InProgressChaptersScalarWhereInput | InProgressChaptersScalarWhereInput[]
    OR?: InProgressChaptersScalarWhereInput[]
    NOT?: InProgressChaptersScalarWhereInput | InProgressChaptersScalarWhereInput[]
    inProgressChapterId?: IntFilter<"InProgressChapters"> | number
    inProgressById?: IntFilter<"InProgressChapters"> | number
  }

  export type ChapterCreateWithoutCompletedChaptersInput = {
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    story: StoryCreateNestedOneWithoutChaptersInput
    inProgressChapters?: InProgressChaptersCreateNestedManyWithoutChaptersInput
  }

  export type ChapterUncheckedCreateWithoutCompletedChaptersInput = {
    id?: number
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    storyId: number
    inProgressChapters?: InProgressChaptersUncheckedCreateNestedManyWithoutChaptersInput
  }

  export type ChapterCreateOrConnectWithoutCompletedChaptersInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutCompletedChaptersInput, ChapterUncheckedCreateWithoutCompletedChaptersInput>
  }

  export type UserCreateWithoutCompletedChaptersInput = {
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    createdStories?: StoryCreateNestedManyWithoutOwnerInput
    inProgressChapters?: InProgressChaptersCreateNestedOneWithoutInProgressByInput
    savedStories?: SavedStoriesCreateNestedOneWithoutSavedByInput
  }

  export type UserUncheckedCreateWithoutCompletedChaptersInput = {
    id?: number
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    createdStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    inProgressChapters?: InProgressChaptersUncheckedCreateNestedOneWithoutInProgressByInput
    savedStories?: SavedStoriesUncheckedCreateNestedOneWithoutSavedByInput
  }

  export type UserCreateOrConnectWithoutCompletedChaptersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCompletedChaptersInput, UserUncheckedCreateWithoutCompletedChaptersInput>
  }

  export type ChapterUpsertWithWhereUniqueWithoutCompletedChaptersInput = {
    where: ChapterWhereUniqueInput
    update: XOR<ChapterUpdateWithoutCompletedChaptersInput, ChapterUncheckedUpdateWithoutCompletedChaptersInput>
    create: XOR<ChapterCreateWithoutCompletedChaptersInput, ChapterUncheckedCreateWithoutCompletedChaptersInput>
  }

  export type ChapterUpdateWithWhereUniqueWithoutCompletedChaptersInput = {
    where: ChapterWhereUniqueInput
    data: XOR<ChapterUpdateWithoutCompletedChaptersInput, ChapterUncheckedUpdateWithoutCompletedChaptersInput>
  }

  export type ChapterUpdateManyWithWhereWithoutCompletedChaptersInput = {
    where: ChapterScalarWhereInput
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyWithoutCompletedChaptersInput>
  }

  export type UserUpsertWithoutCompletedChaptersInput = {
    update: XOR<UserUpdateWithoutCompletedChaptersInput, UserUncheckedUpdateWithoutCompletedChaptersInput>
    create: XOR<UserCreateWithoutCompletedChaptersInput, UserUncheckedCreateWithoutCompletedChaptersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCompletedChaptersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCompletedChaptersInput, UserUncheckedUpdateWithoutCompletedChaptersInput>
  }

  export type UserUpdateWithoutCompletedChaptersInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdStories?: StoryUpdateManyWithoutOwnerNestedInput
    inProgressChapters?: InProgressChaptersUpdateOneWithoutInProgressByNestedInput
    savedStories?: SavedStoriesUpdateOneWithoutSavedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCompletedChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    inProgressChapters?: InProgressChaptersUncheckedUpdateOneWithoutInProgressByNestedInput
    savedStories?: SavedStoriesUncheckedUpdateOneWithoutSavedByNestedInput
  }

  export type ChapterCreateWithoutInProgressChaptersInput = {
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    story: StoryCreateNestedOneWithoutChaptersInput
    completedChapters?: CompletedChaptersCreateNestedManyWithoutChaptersInput
  }

  export type ChapterUncheckedCreateWithoutInProgressChaptersInput = {
    id?: number
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
    storyId: number
    completedChapters?: CompletedChaptersUncheckedCreateNestedManyWithoutChaptersInput
  }

  export type ChapterCreateOrConnectWithoutInProgressChaptersInput = {
    where: ChapterWhereUniqueInput
    create: XOR<ChapterCreateWithoutInProgressChaptersInput, ChapterUncheckedCreateWithoutInProgressChaptersInput>
  }

  export type UserCreateWithoutInProgressChaptersInput = {
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    createdStories?: StoryCreateNestedManyWithoutOwnerInput
    completedChapters?: CompletedChaptersCreateNestedOneWithoutCompletedByInput
    savedStories?: SavedStoriesCreateNestedOneWithoutSavedByInput
  }

  export type UserUncheckedCreateWithoutInProgressChaptersInput = {
    id?: number
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    createdStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    completedChapters?: CompletedChaptersUncheckedCreateNestedOneWithoutCompletedByInput
    savedStories?: SavedStoriesUncheckedCreateNestedOneWithoutSavedByInput
  }

  export type UserCreateOrConnectWithoutInProgressChaptersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInProgressChaptersInput, UserUncheckedCreateWithoutInProgressChaptersInput>
  }

  export type ChapterUpsertWithWhereUniqueWithoutInProgressChaptersInput = {
    where: ChapterWhereUniqueInput
    update: XOR<ChapterUpdateWithoutInProgressChaptersInput, ChapterUncheckedUpdateWithoutInProgressChaptersInput>
    create: XOR<ChapterCreateWithoutInProgressChaptersInput, ChapterUncheckedCreateWithoutInProgressChaptersInput>
  }

  export type ChapterUpdateWithWhereUniqueWithoutInProgressChaptersInput = {
    where: ChapterWhereUniqueInput
    data: XOR<ChapterUpdateWithoutInProgressChaptersInput, ChapterUncheckedUpdateWithoutInProgressChaptersInput>
  }

  export type ChapterUpdateManyWithWhereWithoutInProgressChaptersInput = {
    where: ChapterScalarWhereInput
    data: XOR<ChapterUpdateManyMutationInput, ChapterUncheckedUpdateManyWithoutInProgressChaptersInput>
  }

  export type UserUpsertWithoutInProgressChaptersInput = {
    update: XOR<UserUpdateWithoutInProgressChaptersInput, UserUncheckedUpdateWithoutInProgressChaptersInput>
    create: XOR<UserCreateWithoutInProgressChaptersInput, UserUncheckedCreateWithoutInProgressChaptersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInProgressChaptersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInProgressChaptersInput, UserUncheckedUpdateWithoutInProgressChaptersInput>
  }

  export type UserUpdateWithoutInProgressChaptersInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdStories?: StoryUpdateManyWithoutOwnerNestedInput
    completedChapters?: CompletedChaptersUpdateOneWithoutCompletedByNestedInput
    savedStories?: SavedStoriesUpdateOneWithoutSavedByNestedInput
  }

  export type UserUncheckedUpdateWithoutInProgressChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    completedChapters?: CompletedChaptersUncheckedUpdateOneWithoutCompletedByNestedInput
    savedStories?: SavedStoriesUncheckedUpdateOneWithoutSavedByNestedInput
  }

  export type StoryCreateWithoutSavedStoriesInput = {
    description?: string | null
    name: string
    owner: UserCreateNestedOneWithoutCreatedStoriesInput
    chapters?: ChapterCreateNestedManyWithoutStoryInput
  }

  export type StoryUncheckedCreateWithoutSavedStoriesInput = {
    id?: number
    description?: string | null
    name: string
    userId: number
    chapters?: ChapterUncheckedCreateNestedManyWithoutStoryInput
  }

  export type StoryCreateOrConnectWithoutSavedStoriesInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutSavedStoriesInput, StoryUncheckedCreateWithoutSavedStoriesInput>
  }

  export type UserCreateWithoutSavedStoriesInput = {
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    createdStories?: StoryCreateNestedManyWithoutOwnerInput
    completedChapters?: CompletedChaptersCreateNestedOneWithoutCompletedByInput
    inProgressChapters?: InProgressChaptersCreateNestedOneWithoutInProgressByInput
  }

  export type UserUncheckedCreateWithoutSavedStoriesInput = {
    id?: number
    email?: string | null
    name: string
    password: string
    phoneNumber?: string | null
    createdStories?: StoryUncheckedCreateNestedManyWithoutOwnerInput
    completedChapters?: CompletedChaptersUncheckedCreateNestedOneWithoutCompletedByInput
    inProgressChapters?: InProgressChaptersUncheckedCreateNestedOneWithoutInProgressByInput
  }

  export type UserCreateOrConnectWithoutSavedStoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSavedStoriesInput, UserUncheckedCreateWithoutSavedStoriesInput>
  }

  export type StoryUpsertWithWhereUniqueWithoutSavedStoriesInput = {
    where: StoryWhereUniqueInput
    update: XOR<StoryUpdateWithoutSavedStoriesInput, StoryUncheckedUpdateWithoutSavedStoriesInput>
    create: XOR<StoryCreateWithoutSavedStoriesInput, StoryUncheckedCreateWithoutSavedStoriesInput>
  }

  export type StoryUpdateWithWhereUniqueWithoutSavedStoriesInput = {
    where: StoryWhereUniqueInput
    data: XOR<StoryUpdateWithoutSavedStoriesInput, StoryUncheckedUpdateWithoutSavedStoriesInput>
  }

  export type StoryUpdateManyWithWhereWithoutSavedStoriesInput = {
    where: StoryScalarWhereInput
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyWithoutSavedStoriesInput>
  }

  export type StoryScalarWhereInput = {
    AND?: StoryScalarWhereInput | StoryScalarWhereInput[]
    OR?: StoryScalarWhereInput[]
    NOT?: StoryScalarWhereInput | StoryScalarWhereInput[]
    id?: IntFilter<"Story"> | number
    description?: StringNullableFilter<"Story"> | string | null
    name?: StringFilter<"Story"> | string
    userId?: IntFilter<"Story"> | number
  }

  export type UserUpsertWithoutSavedStoriesInput = {
    update: XOR<UserUpdateWithoutSavedStoriesInput, UserUncheckedUpdateWithoutSavedStoriesInput>
    create: XOR<UserCreateWithoutSavedStoriesInput, UserUncheckedCreateWithoutSavedStoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSavedStoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSavedStoriesInput, UserUncheckedUpdateWithoutSavedStoriesInput>
  }

  export type UserUpdateWithoutSavedStoriesInput = {
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdStories?: StoryUpdateManyWithoutOwnerNestedInput
    completedChapters?: CompletedChaptersUpdateOneWithoutCompletedByNestedInput
    inProgressChapters?: InProgressChaptersUpdateOneWithoutInProgressByNestedInput
  }

  export type UserUncheckedUpdateWithoutSavedStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdStories?: StoryUncheckedUpdateManyWithoutOwnerNestedInput
    completedChapters?: CompletedChaptersUncheckedUpdateOneWithoutCompletedByNestedInput
    inProgressChapters?: InProgressChaptersUncheckedUpdateOneWithoutInProgressByNestedInput
  }

  export type StoryCreateWithoutOwnerInput = {
    description?: string | null
    name: string
    chapters?: ChapterCreateNestedManyWithoutStoryInput
    savedStories?: SavedStoriesCreateNestedManyWithoutStoriesInput
  }

  export type StoryUncheckedCreateWithoutOwnerInput = {
    id?: number
    description?: string | null
    name: string
    chapters?: ChapterUncheckedCreateNestedManyWithoutStoryInput
    savedStories?: SavedStoriesUncheckedCreateNestedManyWithoutStoriesInput
  }

  export type StoryCreateOrConnectWithoutOwnerInput = {
    where: StoryWhereUniqueInput
    create: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput>
  }

  export type StoryCreateManyOwnerInputEnvelope = {
    data: StoryCreateManyOwnerInput | StoryCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type CompletedChaptersCreateWithoutCompletedByInput = {
    completedChapterId: number
    chapters?: ChapterCreateNestedManyWithoutCompletedChaptersInput
  }

  export type CompletedChaptersUncheckedCreateWithoutCompletedByInput = {
    completedChapterId: number
    chapters?: ChapterUncheckedCreateNestedManyWithoutCompletedChaptersInput
  }

  export type CompletedChaptersCreateOrConnectWithoutCompletedByInput = {
    where: CompletedChaptersWhereUniqueInput
    create: XOR<CompletedChaptersCreateWithoutCompletedByInput, CompletedChaptersUncheckedCreateWithoutCompletedByInput>
  }

  export type InProgressChaptersCreateWithoutInProgressByInput = {
    inProgressChapterId: number
    chapters?: ChapterCreateNestedManyWithoutInProgressChaptersInput
  }

  export type InProgressChaptersUncheckedCreateWithoutInProgressByInput = {
    inProgressChapterId: number
    chapters?: ChapterUncheckedCreateNestedManyWithoutInProgressChaptersInput
  }

  export type InProgressChaptersCreateOrConnectWithoutInProgressByInput = {
    where: InProgressChaptersWhereUniqueInput
    create: XOR<InProgressChaptersCreateWithoutInProgressByInput, InProgressChaptersUncheckedCreateWithoutInProgressByInput>
  }

  export type SavedStoriesCreateWithoutSavedByInput = {
    savedStoryId: number
    stories?: StoryCreateNestedManyWithoutSavedStoriesInput
  }

  export type SavedStoriesUncheckedCreateWithoutSavedByInput = {
    savedStoryId: number
    stories?: StoryUncheckedCreateNestedManyWithoutSavedStoriesInput
  }

  export type SavedStoriesCreateOrConnectWithoutSavedByInput = {
    where: SavedStoriesWhereUniqueInput
    create: XOR<SavedStoriesCreateWithoutSavedByInput, SavedStoriesUncheckedCreateWithoutSavedByInput>
  }

  export type StoryUpsertWithWhereUniqueWithoutOwnerInput = {
    where: StoryWhereUniqueInput
    update: XOR<StoryUpdateWithoutOwnerInput, StoryUncheckedUpdateWithoutOwnerInput>
    create: XOR<StoryCreateWithoutOwnerInput, StoryUncheckedCreateWithoutOwnerInput>
  }

  export type StoryUpdateWithWhereUniqueWithoutOwnerInput = {
    where: StoryWhereUniqueInput
    data: XOR<StoryUpdateWithoutOwnerInput, StoryUncheckedUpdateWithoutOwnerInput>
  }

  export type StoryUpdateManyWithWhereWithoutOwnerInput = {
    where: StoryScalarWhereInput
    data: XOR<StoryUpdateManyMutationInput, StoryUncheckedUpdateManyWithoutOwnerInput>
  }

  export type CompletedChaptersUpsertWithoutCompletedByInput = {
    update: XOR<CompletedChaptersUpdateWithoutCompletedByInput, CompletedChaptersUncheckedUpdateWithoutCompletedByInput>
    create: XOR<CompletedChaptersCreateWithoutCompletedByInput, CompletedChaptersUncheckedCreateWithoutCompletedByInput>
    where?: CompletedChaptersWhereInput
  }

  export type CompletedChaptersUpdateToOneWithWhereWithoutCompletedByInput = {
    where?: CompletedChaptersWhereInput
    data: XOR<CompletedChaptersUpdateWithoutCompletedByInput, CompletedChaptersUncheckedUpdateWithoutCompletedByInput>
  }

  export type CompletedChaptersUpdateWithoutCompletedByInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUpdateManyWithoutCompletedChaptersNestedInput
  }

  export type CompletedChaptersUncheckedUpdateWithoutCompletedByInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUncheckedUpdateManyWithoutCompletedChaptersNestedInput
  }

  export type InProgressChaptersUpsertWithoutInProgressByInput = {
    update: XOR<InProgressChaptersUpdateWithoutInProgressByInput, InProgressChaptersUncheckedUpdateWithoutInProgressByInput>
    create: XOR<InProgressChaptersCreateWithoutInProgressByInput, InProgressChaptersUncheckedCreateWithoutInProgressByInput>
    where?: InProgressChaptersWhereInput
  }

  export type InProgressChaptersUpdateToOneWithWhereWithoutInProgressByInput = {
    where?: InProgressChaptersWhereInput
    data: XOR<InProgressChaptersUpdateWithoutInProgressByInput, InProgressChaptersUncheckedUpdateWithoutInProgressByInput>
  }

  export type InProgressChaptersUpdateWithoutInProgressByInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUpdateManyWithoutInProgressChaptersNestedInput
  }

  export type InProgressChaptersUncheckedUpdateWithoutInProgressByInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUncheckedUpdateManyWithoutInProgressChaptersNestedInput
  }

  export type SavedStoriesUpsertWithoutSavedByInput = {
    update: XOR<SavedStoriesUpdateWithoutSavedByInput, SavedStoriesUncheckedUpdateWithoutSavedByInput>
    create: XOR<SavedStoriesCreateWithoutSavedByInput, SavedStoriesUncheckedCreateWithoutSavedByInput>
    where?: SavedStoriesWhereInput
  }

  export type SavedStoriesUpdateToOneWithWhereWithoutSavedByInput = {
    where?: SavedStoriesWhereInput
    data: XOR<SavedStoriesUpdateWithoutSavedByInput, SavedStoriesUncheckedUpdateWithoutSavedByInput>
  }

  export type SavedStoriesUpdateWithoutSavedByInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
    stories?: StoryUpdateManyWithoutSavedStoriesNestedInput
  }

  export type SavedStoriesUncheckedUpdateWithoutSavedByInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
    stories?: StoryUncheckedUpdateManyWithoutSavedStoriesNestedInput
  }

  export type ChapterCreateManyStoryInput = {
    id?: number
    description: string
    details: string
    latitude: number
    longitude: number
    name?: string
    passcode?: string | null
    order: number
    secretText?: string | null
  }

  export type ChapterUpdateWithoutStoryInput = {
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    completedChapters?: CompletedChaptersUpdateManyWithoutChaptersNestedInput
    inProgressChapters?: InProgressChaptersUpdateManyWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateWithoutStoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    completedChapters?: CompletedChaptersUncheckedUpdateManyWithoutChaptersNestedInput
    inProgressChapters?: InProgressChaptersUncheckedUpdateManyWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateManyWithoutStoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SavedStoriesUpdateWithoutStoriesInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
    savedBy?: UserUpdateOneRequiredWithoutSavedStoriesNestedInput
  }

  export type SavedStoriesUncheckedUpdateWithoutStoriesInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
    savedById?: IntFieldUpdateOperationsInput | number
  }

  export type SavedStoriesUncheckedUpdateManyWithoutStoriesInput = {
    savedStoryId?: IntFieldUpdateOperationsInput | number
    savedById?: IntFieldUpdateOperationsInput | number
  }

  export type CompletedChaptersUpdateWithoutChaptersInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
    completedBy?: UserUpdateOneRequiredWithoutCompletedChaptersNestedInput
  }

  export type CompletedChaptersUncheckedUpdateWithoutChaptersInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
    completedById?: IntFieldUpdateOperationsInput | number
  }

  export type CompletedChaptersUncheckedUpdateManyWithoutChaptersInput = {
    completedChapterId?: IntFieldUpdateOperationsInput | number
    completedById?: IntFieldUpdateOperationsInput | number
  }

  export type InProgressChaptersUpdateWithoutChaptersInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
    inProgressBy?: UserUpdateOneRequiredWithoutInProgressChaptersNestedInput
  }

  export type InProgressChaptersUncheckedUpdateWithoutChaptersInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
    inProgressById?: IntFieldUpdateOperationsInput | number
  }

  export type InProgressChaptersUncheckedUpdateManyWithoutChaptersInput = {
    inProgressChapterId?: IntFieldUpdateOperationsInput | number
    inProgressById?: IntFieldUpdateOperationsInput | number
  }

  export type ChapterUpdateWithoutCompletedChaptersInput = {
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    story?: StoryUpdateOneRequiredWithoutChaptersNestedInput
    inProgressChapters?: InProgressChaptersUpdateManyWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateWithoutCompletedChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: IntFieldUpdateOperationsInput | number
    inProgressChapters?: InProgressChaptersUncheckedUpdateManyWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateManyWithoutCompletedChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: IntFieldUpdateOperationsInput | number
  }

  export type ChapterUpdateWithoutInProgressChaptersInput = {
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    story?: StoryUpdateOneRequiredWithoutChaptersNestedInput
    completedChapters?: CompletedChaptersUpdateManyWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateWithoutInProgressChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: IntFieldUpdateOperationsInput | number
    completedChapters?: CompletedChaptersUncheckedUpdateManyWithoutChaptersNestedInput
  }

  export type ChapterUncheckedUpdateManyWithoutInProgressChaptersInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    passcode?: NullableStringFieldUpdateOperationsInput | string | null
    order?: IntFieldUpdateOperationsInput | number
    secretText?: NullableStringFieldUpdateOperationsInput | string | null
    storyId?: IntFieldUpdateOperationsInput | number
  }

  export type StoryUpdateWithoutSavedStoriesInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutCreatedStoriesNestedInput
    chapters?: ChapterUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateWithoutSavedStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    chapters?: ChapterUncheckedUpdateManyWithoutStoryNestedInput
  }

  export type StoryUncheckedUpdateManyWithoutSavedStoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type StoryCreateManyOwnerInput = {
    id?: number
    description?: string | null
    name: string
  }

  export type StoryUpdateWithoutOwnerInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    chapters?: ChapterUpdateManyWithoutStoryNestedInput
    savedStories?: SavedStoriesUpdateManyWithoutStoriesNestedInput
  }

  export type StoryUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    chapters?: ChapterUncheckedUpdateManyWithoutStoryNestedInput
    savedStories?: SavedStoriesUncheckedUpdateManyWithoutStoriesNestedInput
  }

  export type StoryUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StoryCountOutputTypeDefaultArgs instead
     */
    export type StoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChapterCountOutputTypeDefaultArgs instead
     */
    export type ChapterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChapterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompletedChaptersCountOutputTypeDefaultArgs instead
     */
    export type CompletedChaptersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompletedChaptersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InProgressChaptersCountOutputTypeDefaultArgs instead
     */
    export type InProgressChaptersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InProgressChaptersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SavedStoriesCountOutputTypeDefaultArgs instead
     */
    export type SavedStoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SavedStoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StoryDefaultArgs instead
     */
    export type StoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChapterDefaultArgs instead
     */
    export type ChapterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChapterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompletedChaptersDefaultArgs instead
     */
    export type CompletedChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompletedChaptersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InProgressChaptersDefaultArgs instead
     */
    export type InProgressChaptersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InProgressChaptersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SavedStoriesDefaultArgs instead
     */
    export type SavedStoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SavedStoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}